function generateGUID(argument) {
    function S4() {
        return (((1 + Math.random()) * 0x10000) |0).toString(16).substring(1); 
    }
    return (S4() + S4() + "-" + S4() + "-4" + S4().substr(0, 3) + "-" + S4() + "-" + S4() + S4() + S4()).toLowerCase();
};

function titleCase(str) {
    return str
        .toLowerCase()
        .split(' ')
        .map(function(word) {
            return word[0].toUpperCase() + word.substr(1);
        })
        .join(' ');
};

function getFunctionName(func) {
    var ret = func.toString();
    ret = ret.substr('function '.length);
    ret = ret.substr(0, ret.indexOf('('));
    return ret;
};

function getFunctionArguments(func){
	var args = func.toString().
  		replace(/[\r\n\s]+/g, ' ').
  		match(/function\s*\w*\s*\((.*?)\)/)[1].split (/\s*,\s*/);
  	return args;
}

function enumerate(collection, context, callback, callbackComplete){

	if (!collection){
		throw "colection not supplied for enumeration.";
	}
	if (!context){
		throw "context not supplied for callbacks.";
	}
	if (!callback){
		throw "callback not supplied.";
	}
	if (typeof callback !== 'function'){
		throw "callback not supplied.";
	}
	for (var i = collection.length - 1; i >= 0; i--) {
		var item = collection[i];
		var exit = false;
		if (item != undefined){
			callback.call(context, item, function setCondition(condition, cbCondition){
				if (condition == true){
					cbCondition();
				}
			}, function remove(){
				collection.splice(i,1);
			},function _break(){
				exit = true;
			},function replace(newItem){
				collection[i] = newItem;
			},function begin(){
			},function end(){
			});
		}
		if (exit){
			break;
		}
	};
	if (callbackComplete){
		callbackComplete.call(context);
	}
};

function escapePath(_path){
	var newPath = _path.replace(/[\\]/gm,'/');
	return newPath;
};

function generateRandomNumber(min, max){
	 return Math.floor(Math.random() * (max - min + 1)) + min;
};

function sortArray(array, numericSortingProperty){
	var sortCount = array.length * 2;
	for (var i = sortCount; i > 0; i--) {
		array.sort(function(obj1,obj2){
			return obj1[numericSortingProperty] - obj2[numericSortingProperty];
		});
	}
	array.reverse();
};

function isKeyAlphaNumeric(keyCode, cbDone){
	if ((keyCode >= 65 && keyCode <= 90) || (keyCode >= 48 && keyCode <= 57)) {
		cbDone();
	}
}

function getFileName(filePath){
	return path.basename(filePath);
};

function getDirectories (srcpath, cbDir, cbComplete, cbFail) {
	try{
		var _srcpath = escapePath(srcpath);
		var resolvedPath = path.resolve(_srcpath);
	  	var dirs = fs.readdirSync(_srcpath);
	    if (dirs.length > 0){
		    for (var i = dirs.length - 1; i >= 0; i--) {
		    	var filePath = path.join(resolvedPath, dirs[i]);
		    	if (fs.statSync(filePath).isDirectory()){
			    	var resolvedDir =  escapePath(filePath);
			    	cbDir(resolvedDir);
		    	}
		    };
	    }
	    cbComplete();
	}catch(err){
		cbFail(err);
	}
};

function getFiles(srcpath, cbFile, cbComplete, cbFail) {
	try{
		var _srcpath = escapePath(srcpath);
		var files = fs.readdirSync(_srcpath);
	    for (var i = files.length - 1; i >= 0; i--) {
	    	var filePath = path.join(_srcpath, files[i]);
	    	if (fs.statSync(filePath).isFile()){
	    		cbFile(files[i]);
	    	}
	    };
		cbComplete();
	}catch(err){
		cbFail(err);
	}
};

function enumerateDir(parentDir, filter, callback, cbComplete, cbFail, isRoot){

	var _parentDir = escapePath(parentDir);
	var _resolvedDir = escapePath(path.resolve(_parentDir));
	
	getFiles(_resolvedDir, function(fileName){
		var filePath = escapePath(path.join(_resolvedDir, fileName));
		if (fileName.endsWith(filter)){
			callback(filePath);											
		}
	}, function complete(){
	}, cbFail);

	var _resolvedChildDir = null;
	getDirectories(_resolvedDir, function(childDir){
		_resolvedChildDir = escapePath(childDir);
		enumerateDir(_resolvedChildDir, filter, callback, cbComplete, cbFail, false);
	}, function complete(){
		if (isRoot === undefined){
			cbComplete();
		}
	}, cbFail);
};

function wrapInFactoryRegister(funcName, bodyCode, cbDone){
	var js = 'window.factory.register(function [funcName](input) { \r\n [bodyCode] 	\r\n}, function constructor(obj){\r\n    Object.seal(obj);\r\n},function errorHandle(errMsg){\r\n    throw errMsg;\r\n});\r\n';
	js = js.replace("[funcName]",funcName);
	js = js.replace("[bodyCode]",bodyCode);
	cbDone(js);
};

function saveFile(fileSpec, data, cbComplete, cbFail){
	try{
		var options = { flag : 'w+',encoding: "utf8" };
		fs.writeFileSync(fileSpec, data, options);
		cbComplete();
	}catch(err){
		cbFail(err);
	}
};

function readFile(fileSpec, cbComplete, cbFail){
	try{
		var data = fs.readFileSync(fileSpec, 'utf8');
		cbComplete(data);
	}catch(err){
		cbFail(err);
	}
};

function removeFile(filePath){
	var _filePath = escapePath(filePath);
	fs.unlinkSync(_filePath);
};

function copyFile(sourceFilePath, destinationFilePath){
	console.log("Copying " + sourceFilePath + " to " + destinationFilePath);
	fs.createReadStream(sourceFilePath).pipe(fs.createWriteStream(destinationFilePath));
};

function cache() {
	
	this.Id = generateGUID();
	var cache = this;
	function getKeys(callback){
		for (var obj in cache){
			var key =obj.toString() 
			if (key.startsWith("_") && !key.startsWith("_keys")){
				callback(key);
			}
		}
	};

	this._keys = [];
	this.isClass = true;

	this.set = function(key, instance, callback, canBeDestroyed){
		var newKey = "_"+key;
		if (cache._keys.indexOf(newKey) == -1){
			cache._keys.push(newKey);
		}
		cache[newKey] = {
			instance: instance,
			destroy: canBeDestroyed
		};
		if (callback){
			callback(instance);
		}
	};

	this.get = function(key, cbFound, cbNotFound){
		var newKey = "_"+key;
		var item = cache[newKey];
		if (item && item.instance){
			cbFound(item.instance);
		}else{
			if (cbNotFound){
				cbNotFound();
			}
		}
	};
	
	this.remove = function(key){
		var newKey = "_"+key;
		delete cache[key];
	};
	
	this.reset = function() {
		var keysToKeep = [];
		getKeys(function(key){
			var item = cache[key];
			if (item.instance.destroy && (item.destroy == undefined || item.destroy == true)){
				item.instance.destroy();
			}
			if (item.destroy == undefined || item.destroy == true){
				delete cache[key];
			}else{
				keysToKeep.push(key);
			}
		});
		cache._keys = [];
		cache._keys = cache._keys.concat(keysToKeep);
	};
};

function getConfigFromGithub(configName, username, password, cbDone){

	// basic auth
	var gh = new GitHub({
	   username: username,
	   password: password
	});

	var repo = gh.getRepo(username, "designs");
	var path = "lib/config/"+configName+".json";

	repo.getContents('refs/heads/master', path, true, function(http){
		if (http && http.response && http.response.status == 403){
			throw http.response.data.message;
		}
		if (http && http.response && http.response.status == 404){
			cbDone(null, repo, path);
		}
	}).then(function(content) {
		if (content && content.data){
			var payload = content.data;
			cbDone(payload, repo, path);
		}
	});
};

function sendToGithub(configName, username, password, changedConfigArray, cbDone, isNewFile){
	getConfigFromGithub(configName, username, password, function(payload, repository, repoFilePath){
		var jsonStr = JSON.stringify(changedConfigArray, null, 4);
		repository.writeFile("designer", repoFilePath, jsonStr, "auto commit config by designer",{}).then(function() {
		  cbDone();
		}, function() {
		  // one or more failed
		});
	});
};

String.prototype.replaceAt=function(index, character) {
    return this.substr(0, index) + character + this.substr(index+character.length);
}

var fs;
var path;

if (typeof module !== 'undefined' && module.exports) {
	fs = require('fs');
	path = require('path');
	module.exports = {
		titleCase: titleCase,
		getFiles: getFiles,
		readFile: readFile,
		saveFile: saveFile,
		wrapInFactoryRegister: wrapInFactoryRegister,
		getDirectories: getDirectories,
		enumerateDir: enumerateDir,
		removeFile:removeFile,
		enumerate: enumerate,
		getFileName: getFileName,
		copyFile: copyFile
	};
} function getAllDependeciesFromCache(callback){
	window.cache.get("dependencies",function(dependencies){
		callback(dependencies);
	},function(){
		var dependencies = [];
		window.cache.set("dependencies", dependencies, null, false);
		callback(dependencies);
	});
};

function getFactoryInstanceIds(callback){
	var allIds = [];
	window.cache.get("ids",function(allIdsArray){
		allIds = allIdsArray;
	},function(){
		window.cache.set("ids", allIds, null, false);
	});
	callback(allIds);
};

function getDependencyItemFromCache(callbackItem, callbackComplete){
	getAllDependeciesFromCache(function(dependencies){
		enumerate(dependencies, this, function item(dep){
			callbackItem(dep);
		},function(){
			callbackComplete();
		});
	});
};

function ctorClass(type, params){
	var obj = Reflect.construct(type, params);
	obj["isClass"] = true;
	if (!obj.reset){
		throw  (Id + " does not have a function called reset.");
	}
	return obj;
}

function ctor(Id, type, params, isClass){
	getFactoryInstanceIds(function(allIds){
		if (Id.endsWith("cache")){
			allIds.push(Id);
			window.cache.set(Id, window.cache, null, false);
		}else if (isClass) {
			var obj = ctorClass(type, params);
			allIds.push(Id);
			window.cache.set(Id, obj, null, false);
		}else {
			var obj = type(params);
			try {
				obj = JSON.parse(obj);
			} catch(err) {
				console.log("Factory: there was an error pasring config for " + Id);
			}
			allIds.push(Id);
			window.cache.set(Id, obj, null, false);
		}
	});
};

function ensureInstance(Id, params, newClass, isClass, cbCreated){
	window.cache.get(Id, function found(instance){
		cbCreated(instance);
	},function notFound(){
		console.log("creating instance for "+Id);
		ctor(Id, newClass, params, isClass);
		ensureInstance(Id, params, newClass, isClass, cbCreated);
	});
};

function getParameters(typeName, cbFound, cbNotFound){
	var params = [];
	var totalNoDep = 0;
	var paramTypes = [];
	var isClass;
	var type;
	getDependencyItemFromCache(function item(dep){
		if (dep.typeName == typeName && dep.dependantTypeName){
			type = dep.type;
			isClass = dep.isClass;
			var depId = "#"+dep.dependantTypeName;
			totalNoDep = dep.totalNoDep;
			paramTypes.push(dep.dependantTypeName);
			window.cache.get(depId, function(instance){
				params.push(instance);
			});
		}else if (dep.typeName == typeName){
			type = dep.type;
			isClass = dep.isClass;
		}
	},function complete(){
		if (totalNoDep == params.length){
			cbFound(params, type, isClass);
		}else{
			cbNotFound(paramTypes);
		}
	});
};

function createGetInstanceFunction(typeName){
	window.cache.get("factoryFunctions", function(factoryFunctions){
		cache.set(typeName, function(cbFound){
			getParameters(typeName, function found(params, type, _isClass){
				var Id = "#"+typeName;
				ensureInstance(Id, params, type, _isClass, function found(instance){
					cbFound(instance);
				});
			},function notFound(paramTypes){
				enumerate(paramTypes, this, function item(depType){
					window.cache.get(depType, function(func){
						func(function(){
						});
					},function(){
						throw "can't find depend type "+depType;
					});
				},function complete(){
					window.cache.get(typeName, function(func){
						func(function(instance){
							cbFound(instance);
						});
					},function(){
						throw "can't find type "+typeName;
					});
				});
			});
		},function(func){
			window.cache.get(typeName, function(func){
				factoryFunctions[typeName] = func;
			});
		});

	});
};

function register(isClass, ctor, errCallback){
	if (typeof ctor !== 'function'){
		var err = new Error();
		throw "failed to register type, one or more callback parameters are not of type function or are missing. STACK: /n " + err.stack;
	} else {
		var typeName = getFunctionName(ctor);
		var args = getFunctionArguments(ctor);
        var depCount = args.length;
		if (args.length == 1 && args.indexOf("") >= 0){
    		depCount--;
    	}
		enumerate(args, this, function item(arg) {
			getAllDependeciesFromCache(function(dependencies){
				var dep = { 
					Id: generateGUID(), 
					typeName: typeName, 
					dependantTypeName: arg,
					priority: 0,
					type: ctor,
					isClass: isClass,
					totalNoDep: depCount,
					isResolved: false
				};
				dependencies.push(dep);
			});
		},function complete(){
			createGetInstanceFunction(typeName);
		});
	}
};

function reload(cbComplete) {
	console.clear();
	getFactoryInstanceIds(function(allIds) {
		enumerate(allIds, this, function item(instanceId, cbCondition, cbRemove, cbBreak){
			if (instanceId.startsWith("#")){
				window.cache.get(instanceId, function(_instance){
					if (_instance.isClass){
						_instance.reset();
					}
				});
			}
		},function(){
			if (cbComplete){
				cbComplete();
			}
		});
	});
};

function factory(cbReady) {
	if (typeof window.cache === 'function'){
		window.cache = ctorClass(cache,[]);
	}
	window.cache.get("factoryFunctions", function(_factoryFunctions){
		cbReady(_factoryFunctions);
	},function(){
		var factoryFunctions = {
			reload: reload,
			register: register
		};
		window.cache.set("factoryFunctions", factoryFunctions, null, false);
		cbReady(factoryFunctions);
	});
};

var cacheFunc = cache;
factory(function(factory){
	factory.register(true, cacheFunc);
});factory(function(factory){
  factory.register(true, function eventHandler(cache) {
      this.publish = function(data1, data2, data3, _callback, context) {
        var _Id = _callback.prototype.constructor.name
        cache.get(_Id, function(subscription) {
          var callContext = subscription.context || context;
          if (callContext){
            subscription.callback.call(callContext, data1, data2, data3);
          }else{
            subscription.callback(data1, data2, data3);
          }
            
        }, function() {
          console.log("WARNING: published " + _Id + " without any subscribers.");
        });
      };

      this.subscribe = function(_callback, context) {
        var msg = "the callback function requires a function name";
        var _Id = _callback.prototype.constructor.name
        if (!_Id) {
          throw msg;
        }
        console.log("subscribed to " + _Id);
        cache.get(_Id, function() {
          throw "already subscribed to " + _Id;
        }, function() {
          cache.set(_Id, {
            callback: _callback,
            context: context
          });
        });
      };

      this.unsubscribe = function(func) {
        var _Id = func.prototype.constructor.name
        cache.remove(_Id);
      };

      this.reset = function() {
      };
  }, function error(err) {});
});factory(function(factory) {
  factory.register(true, function textBuilder(textBuilderConfig, phaserGame, eventHandler, cache) {


    var builtObjIdsCacheId = "textBuiltObjIds";

    function getBuiltObjects(callback, cbComplete) {
      cache.get(builtObjIdsCacheId, function(builtObjIds) {
        enumerate(builtObjIds, this, function(builtObjId) {
          cache.get(builtObjId, function(builtObj) {
            callback(builtObj);
          });
        }, cbComplete);
      });
    };

    function mergeConfigurations(sceneConfiguration, textConfig) {
      for (var prop in textConfig) {
        sceneConfiguration[prop] = textConfig[prop];
      };
    };

    this.initialise = function(sceneConfigurations, sceneIndex) {
      cache.set(builtObjIdsCacheId, []);
      enumerate(sceneConfigurations, this, function(sceneConfiguration) {
        enumerate(textBuilderConfig, this, function(textConfig) {
          if (textConfig.name == sceneConfiguration.name) {
            var configId = "config_" + sceneConfiguration.name;
            cache.get(configId, function() {}, function() {
              cache.set(configId, sceneConfiguration);
            });
            mergeConfigurations(sceneConfiguration, textConfig);
          }
        });
      });
    };

    this.loadText = function(sceneConfig, callback) {
      callback();
    };

    this.createText = function(sceneConfig, callback) {
      console.log("-------------------CREATING TEXT (" + sceneConfig.name + ")---------------------");
      var textXPos = sceneConfig.xPosition;
      var textYPos = sceneConfig.yPosition;
      if (!sceneConfig.text) {
        sceneConfig.text = "Blank";
      }
      var text = phaserGame.add.text(textXPos,
        textYPos,
        sceneConfig.text,
        sceneConfig);
      if (sceneConfig.anchor == true) {
        text.anchor.setTo(0.5, 0.5);
      }
      text.width = sceneConfig.width;
      text.height = sceneConfig.height;
      text.scale.setTo(sceneConfig.xScale, sceneConfig.yScale);

      var objId = "text_" + sceneConfig.name;
      cache.get(builtObjIdsCacheId, function(objectIds) {
        objectIds.push(objId);
        cache.set(objId, {
          obj: text,
          config: sceneConfig,
          state: {
            isSelected: false
          }
        });
      });
      callback();
    };

    this.getText = function(callback, cbComplete) {
      getBuiltObjects(function(builtObject) {
        callback(builtObject);
      }, function() {
        if (cbComplete) {
          cbComplete();
        }
      });
    };

    this.getTextConfigById = function(name, callback) {
      enumerate(textBuilderConfig, this, function(config) {
        if (name == config.name) {
          callback(config);
        }
      });
    };

    this.reset = function() {};
  }, function error(err) {})
});factory(function(factory) {
  factory.register(true, function spriteBuilder(spriteBuilderConfig, phaserGame, eventHandler, cache) {


    var builtObjIdsCacheId = "spriteBuiltObjIds";

    function getBuiltObjects(callback, cbComplete) {
      cache.get(builtObjIdsCacheId, function(builtObjIds) {
        enumerate(builtObjIds, this, function(builtObjId) {
          cache.get(builtObjId, function(builtObj) {
            callback(builtObj);
          });
        }, cbComplete);
      });
    };

    function mergeConfigurations(sceneConfiguration, gameObjectConfig) {
      for (var prop in gameObjectConfig) {
        sceneConfiguration[prop] = gameObjectConfig[prop];
      };
    };

    this.initialise = function(sceneConfigurations) {
      cache.set(builtObjIdsCacheId, []);
      enumerate(sceneConfigurations, this, function(sceneConfiguration) {
        enumerate(spriteBuilderConfig, this, function(spriteConfig) {
          if (spriteConfig.name == sceneConfiguration.name) {
            var configId = "config_" + sceneConfiguration.name;
            cache.get(configId, function() {}, function() {
              cache.set(configId, sceneConfiguration);
            });
            mergeConfigurations(sceneConfiguration, spriteConfig);
          }
        });
      });
    };

    this.loadSprite = function(sceneConfig, callback) {
      callback();
    };

    this.createSprite = function(sceneConfig, callback) {
      console.log("-------------------CREATING SPRITE (" + sceneConfig.name + ")---------------------");

      var sprite = phaserGame.add.sprite(sceneConfig.xPosition, sceneConfig.yPosition, sceneConfig.name);
      sprite.enableBody = true;
      sprite.inputEnabled = true;
      sprite.width = sceneConfig.width;
      sprite.height = sceneConfig.height;
      sprite.anchor.setTo(0, 0);

      var state = {
        isSelected: false
      };

      if (sceneConfig.isStatic == false) {
        eventHandler.subscribe(function gameUpdate() {});
      }
      sprite.scale.setTo(sceneConfig.xScale, sceneConfig.yScale);

      sprite.events.onInputDown.add(function() {
        eventHandler.publish(sprite, sceneConfig, state, function receiveSpriteFocus() {}, this);
      }, this);

      var objId = "sprite_" + sceneConfig.name;
      cache.get(builtObjIdsCacheId, function(objectIds) {
        objectIds.push(objId);
        cache.set(objId, {
          obj: sprite,
          config: sceneConfig,
          state: state
        });
      });
      callback();
    };

    this.updateSprites = function() {};

    this.getSprites = function(callback, cbComplete) {
      getBuiltObjects(function(builtObject) {
        callback(builtObject);
      }, function() {
        if (cbComplete) {
          cbComplete();
        }
      });
    };

    this.getSpriteConfigById = function(name, callback) {
      enumerate(spriteBuilderConfig, this, function(config) {
        if (name == config.name) {
          callback(config);
        }
      });
    };

    this.reset = function() {};

  }, function error(err) {})
});factory(function(factory) {
  factory.register(true, function scoreboardScene(eventHandler, sceneObjBuilder, builderManager, playerScoreProvider, phaserGame, sceneSelector) {


    var sceneName = "scoreboardScene";
    this.initialise = function() {

      eventHandler.subscribe(function animationComplete(animation, sceneConfig) {
        if (sceneConfig.name.indexOf("play") >= 0) {
          //sceneSelector.next();
        }
      });

      eventHandler.subscribe(function receiveSpriteFocus(sprite, sceneConfig, state) {
        sceneObjBuilder.getFocusedSceneObj(function(obj, _sceneConfig, _state) {
          _state.isSelected = false;
        });
        state.isSelected = true;
        sceneObjBuilder.playAllAnimationsForSceneObj(sceneConfig);
      });

      eventHandler.subscribe(function mouseMove(position) {
        builderManager.getImages(function(image, config, state) {
          if (config.name.indexOf("cursor") >= 0) {
            image.x = position.x;
            image.y = position.y;
          }
        });
      });

    };

    this.load = function() {
      sceneObjBuilder.loadScene(sceneName);
    };

    this.create = function() {
      sceneObjBuilder.createScene(sceneName);
      var playerScores = playerScoreProvider.getSortedPlayers();
      builderManager.getText(function(scoreText, sceneConfig, state) {
        if (sceneConfig.name.indexOf("playerScoreText") >= 0) {
          enumerate(playerScores, this, function(score, cbCondition, cbRemove, cbBreak) {
            scoreText.text = score.name + "\xa0\xa0\xa0\xa0" + score.value;
            cbRemove();
            cbBreak();
          });
        }
      });
    };

    this.reset = function() {};

  }, function error(err) {})
});factory(function(factory) {
  factory.register(true, function sceneUserInputEvents(phaserGame, eventHandler) {


    this.initialise = function() {
      phaserGame.input.mouse.mouseMoveCallback = function(position) {
        eventHandler.publish(position, null, null, function mouseMove() {});
      };
      phaserGame.input.keyboard.addCallbacks(this, null, function(keyData) {
        eventHandler.publish(keyData, null, null, function keyPress() {});
      }, null);
    };

    this.reset = function() {
      phaserGame.input.mouse.mouseMoveCallback = null;
      phaserGame.input.keyboard.stop();
      phaserGame.input.keyboard.start();
    };
  }, function error(err) {})
});factory(function(factory) {
  factory.register(true, function sceneSelector(sceneSelectorConfig, sceneManager, cache) {


    var cacheId = "sceneState";
    this.next = function() {

      function selectScene(state) {
        var nextScene = sceneSelectorConfig[state.sceneIndex];
        if (state.sceneCount > 1) {
          sceneManager.initialise(nextScene.name, nextScene.template);
          eventHandler.publish(scene, null, null, function nextScene() {}, this);
        } else if (state.sceneCount == 1) {
          state.sceneCount--;
          sceneManager.initialise(nextScene.name, nextScene.template);
          eventHandler.publish(scene, null, null, function nextScene() {}, this);
        } else {
          console.log("There is only one scene.");
        }
        state.sceneIndex--;
        if (state.sceneIndex == -1) {
          state.sceneIndex = sceneSelectorConfig.length - 1;
        }
      };

      cache.get(cacheId, function(state) {
        selectScene(state);
      }, function() {
        var state = {
          sceneIndex: sceneSelectorConfig.length - 1,
          sceneCount: sceneSelectorConfig.length
        };

        cache.set(cacheId, state);
        selectScene(state);
      });
    };

    this.select = function(sceneName, template) {
      enumerate(sceneSelectorConfig, this, function(config) {
        if (config.name == sceneName && config.template == template) {
          sceneManager.initialise(config.name, config.template);
        }
      });
    };

    this.getSceneConfig = function(callback, cbComplete) {
      sceneSelectorConfig.sort(function(i1, i2) {
        return i1.index - i2.index;
      });
      enumerate(sceneSelectorConfig, this, function(sceneConfig) {
        callback(sceneConfig);
      }, cbComplete);
    };

    this.reset = function() {
      cache.get(cacheId, function(state) {
        state.sceneIndex = sceneSelectorConfig.length - 1;
        state.sceneCount = sceneSelectorConfig.length;
      });
      sceneManager.reset();
    };
  }, function error(err) {})
});factory(function(factory) {
  factory.register(true, function sceneObjBuilder(spriteBuilder, animationBuilder, textBuilder, imageBuilder, phaserGame, cache) {


    var buildConfigCacheId = "buildConfigCacheId";
    this.initialise = function(sceneConfigurations) {
      sceneConfigurations.sort(function(i1, i2) {
        return i1.priority - i2.priority;
      });
      var prioritisedBuildConfig = [];
      var priority = 0;
      enumerate(sceneConfigurations, this, function(sceneConfig) {
        if (sceneConfig.enabled) {
          if (sceneConfig.type == "sprite") {
            priority++;
            prioritisedBuildConfig.push({
              priority: priority,
              loadFunc: spriteBuilder.loadSprite,
              createFunc: spriteBuilder.createSprite,
              config: sceneConfig
            });
          }
          if (sceneConfig.type == "animation") {
            priority++;
            prioritisedBuildConfig.push({
              priority: priority,
              loadFunc: animationBuilder.loadAnimation,
              createFunc: animationBuilder.createAnimation,
              config: sceneConfig
            });
          }
          if (sceneConfig.type == "image") {
            priority++;
            prioritisedBuildConfig.push({
              priority: priority,
              loadFunc: imageBuilder.loadImage,
              createFunc: imageBuilder.createImage,
              config: sceneConfig
            });
          }
          if (sceneConfig.type == "text") {
            priority++;
            prioritisedBuildConfig.push({
              priority: priority,
              loadFunc: textBuilder.loadText,
              createFunc: textBuilder.createText,
              config: sceneConfig
            });
          }
          if (sceneConfig.type == "sprite | animation") {
            priority++;
            prioritisedBuildConfig.push({
              priority: priority,
              loadFunc: animationBuilder.loadAnimation,
              createFunc: animationBuilder.createAnimation,
              config: sceneConfig
            });
            priority++;
            prioritisedBuildConfig.push({
              priority: priority,
              loadFunc: spriteBuilder.loadSprite,
              createFunc: spriteBuilder.createSprite,
              config: sceneConfig
            });
          }
        }
      }, function() {
        prioritisedBuildConfig.sort(function(i1, i2) {
          return i1.priority - i2.priority;
        });
        cache.set("buildConfigCacheId", prioritisedBuildConfig);
        spriteBuilder.initialise(sceneConfigurations);
        animationBuilder.initialise(sceneConfigurations);
        textBuilder.initialise(sceneConfigurations);
        imageBuilder.initialise(sceneConfigurations);
      });
    };

    this.getConfigByType = function(type, cbConfig, cbComplete) {
      cache.get(buildConfigCacheId, function(allBuildConfig) {

        var matchingConfig = [];
        enumerate(allBuildConfig, this, function(buildConfig) {
          if (type == "animation") {
            animationBuilder.getAnimationConfigById(buildConfig.config.name, function(config) {
              matchingConfig.push(config);
            });
          } else if (type == "image") {
            imageBuilder.getImageConfigById(buildConfig.config.name, function(config) {
              matchingConfig.push(config);
            });
          } else if (type == "text") {
            textBuilder.getTextConfigById(buildConfig.config.name, function(config) {
              matchingConfig.push(config);
            });
          } else if (type == "sprite") {
            spriteBuilder.getSpriteConfigById(buildConfig.config.name, function(config) {
              matchingConfig.push(config);
            });
          }
        }, function() {
          enumerate(matchingConfig, this, function(_config) {

            var duplicateCount = 0;
            enumerate(matchingConfig, this, function(_otherConfig, cbCondition, cbRemove) {
              var json01 = JSON.stringify(_config);
              var json02 = JSON.stringify(_otherConfig);
              if (json01 == json02) {
                duplicateCount++;
                if (duplicateCount > 1) {
                  cbRemove();
                }
              }
            });

          }, function() {
            enumerate(matchingConfig, this, function(_config) {
              cbConfig(_config);
            }, cbComplete);
          });
        });
      });
    };

    this.loadObjects = function(cbComplete) {
      cache.get(buildConfigCacheId, function(allBuildConfig) {
        enumerate(allBuildConfig, this, function(buildConfig) {
          buildConfig.loadFunc(buildConfig.config, function loaded() {

          });
        }, cbComplete);
      });
    };

    this.createObjects = function(cbComplete) {
      cache.get(buildConfigCacheId, function(allBuildConfig) {
        enumerate(allBuildConfig, this, function(buildConfig) {
          buildConfig.createFunc(buildConfig.config, function created() {});
        }, cbComplete);
      });
    };

    this.getAnimations = function(callback, cbComplete) {
      animationBuilder.getAnimations(function(scene) {
        callback(scene);
      });
    };

    this.getSprites = function(cbFound) {
      spriteBuilder.getSprites(function(scene) {
        cbFound(scene.obj,
          scene.config,
          scene.state);
      });
    };

    this.getText = function(cbFound) {
      textBuilder.getText(function(scene) {
        cbFound(scene.obj,
          scene.config,
          scene.state);
      });
    };

    this.getImages = function(cbFound) {
      imageBuilder.getImages(function(scene) {
        cbFound(scene.obj,
          scene.config,
          scene.state);
      });
    };

    this.reset = function() {};

  }, function error(err) {})
});factory(function(factory) {
  factory.register(true, function sceneManager(sceneObjBuilder, eventHandler, phaserGame, sceneUserInputEvents, cache) {



    function playAnimationForSceneObj(animation, config, state) {
      var timeOffset = Math.floor((Math.random() * 600) + 50);
      setTimeout(function() {
        animation.play();
        console.log("playing animation for ", config.Id);
      }, timeOffset);
    };

    this.initialise = function(sceneName, templateName) {

      var sceneConfigName = sceneName;
      sceneConfigName = sceneConfigName.replace(" ", "").toLowerCase();
      sceneConfigName = sceneConfigName + templateName + "Config";

      factory[sceneConfigName](function(sceneConfig) {

        console.log("");
        console.log("loading the ", sceneConfigName + " state.");

        eventHandler.unsubscribe(function gameLoad() {});
        eventHandler.unsubscribe(function gameCreate() {});
        eventHandler.unsubscribe(function gameUpdate() {});
        eventHandler.unsubscribe(function animationCreated() {});
        eventHandler.unsubscribe(function spriteUpdate() {});
        eventHandler.unsubscribe(function imageUpdate() {});

        factory[templateName](function(sceneInstance) {
          sceneInstance.initialise();
        });
        eventHandler.subscribe(function gameLoad() {
          factory[templateName](function(sceneInstance) {
            sceneInstance.load();
          });
        });
        eventHandler.subscribe(function gameCreate() {
          factory[templateName](function(sceneInstance) {
            sceneInstance.create();
          });
        });
        sceneUserInputEvents.initialise();
        sceneObjBuilder.initialise(sceneConfig);
      });
    };

    this.loadScene = function() {
      sceneObjBuilder.loadObjects();
    };

    this.createScene = function() {
      sceneObjBuilder.createObjects();
      sceneObjBuilder.getAnimations(function(scene) {
        if (scene.config.start == true) {
          console.log("auto starting animation");
          playAnimationForSceneObj(scene.obj,
            scene.config,
            scene.state);
        }
      });
    };

    this.getFocusedSceneObj = function(cbFound) {
      sceneObjBuilder.getSprites(function(obj, config, state) {
        if (state.isSelected) {
          cbFound(obj, config, state);
        }
      });
      sceneObjBuilder.getText(function(obj, config, state) {
        if (state.isSelected) {
          cbFound(obj, config, state);
        }
      });
    };

    this.playAllAnimationsForSceneObj = function(sceneObj) {
      sceneObjBuilder.getAnimations(function(scene) {
        enumerate(sceneObj.animations, this, function item(indexConfig) {
          if (scene.config.Id == indexConfig.Id) {
            playAnimationForSceneObj(scene.obj,
              scene.config,
              scene.state);
          }
        });
      });
    };

    this.getSceneConfig = function(sceneTitle, callback) {
      factory["sceneSelectorConfig"](function(sceneSelectorConfig) {
        enumerate(sceneSelectorConfig, this, function(sceneSelectorConfigItem) {
          var formattedTitle = sceneSelectorConfigItem.title.replace(new RegExp(" ", 'g'), "");
          if (formattedTitle == sceneTitle) {
            factory[sceneSelectorConfigItem.name + "Config"](function(allSceneConfig) {
              var sceneConfig = allSceneConfig[sceneSelectorConfigItem.index.toString()];
              callback(sceneConfig, sceneSelectorConfigItem);
            });
          }
        });
      });
    };

    this.reset = function() {
      sceneUserInputEvents.reset();
    };

  }, function error(err) {})
});factory(function(factory) {
  factory.register(true, function preloaderScene(sceneManager, sceneObjBuilder, sceneSelector, eventHandler) {


    var sceneName = "preloaderScene";
    this.initialise = function() {
      eventHandler.subscribe(function animationComplete() {
        //sceneSelector.next();
      });
      eventHandler.subscribe(function mouseMove(position) {
        sceneObjBuilder.getImages(function(image, config, state) {
          if (config.name.indexOf("cursor") >= 0) {
            image.x = position.x;
            image.y = position.y;
          }
        });
      });
    };

    this.load = function() {
      sceneManager.loadScene(sceneName);
    };
    this.create = function() {
      sceneManager.createScene(sceneName);
    };

    this.reset = function() {};

  }, function error(err) {})
});factory(function(factory) {
  factory.register(true, function playerScoreProvider() {


    function Score(name, value) {
      this.name = name;
      this.value = value;
    };

    var players = [];

    function create() {
      players = [
        new Score("Fachtna Hrolf", 10),
        new Score("Senán Fabio", 14),
        new Score("Bartolomeo Zopyros", 106),
        new Score("Jadran Nevan", 104),
        new Score("Bjartr Shikoba", 50),
      ];
      players.sort(function(p1, p2) {
        return p1.value - p2.value;
      });
    };
    create();

    this.getSortedPlayers = function() {
      return players;
    };

    this.reset = function() {
      create();
    };

  }, function error(err) {})
});factory(function(factory) {
  factory.register(true, function phaserGame(phaserGameConfig, eventHandler, cache) {


    function createGame() {
      return new Phaser.Game(
        phaserGameConfig.width,
        phaserGameConfig.height,
        Phaser.CANVAS,
        phaserGameConfig.title, {
          preload: function() {
            cache.get("isResume", function() {
              eventHandler.publish(null, null, null, function gameLoad() {}, game);
            });
          },
          create: function() {
            cache.get("isResume", function() {
              eventHandler.publish(null, null, null, function gameCreate() {}, game);
            });
          }
        }
      );
    };

    var game;
    var thisInstance = this;
    var requiredSceneName;
    var requiredSceneTemplate;

    this.start = function(sceneName, sceneTemplate, cbStarted) {
      game = createGame();
      if (requiredSceneName != sceneName || requiredSceneTemplate != sceneTemplate) {
        requiredSceneName = sceneName;
        requiredSceneTemplate = sceneTemplate;
      }
      setTimeout(function() {
        game.inputEnabled = true;
        thisInstance.add = game.add;
        thisInstance.load = game.load;
        thisInstance.state = game.state;
        thisInstance.world = game.world;
        thisInstance.input = game.input;
        thisInstance.physics = game.physics;
        factory["sceneSelector"](function(sceneSelector) {
          if (requiredSceneName && requiredSceneTemplate) {
            sceneSelector.select(requiredSceneName, requiredSceneTemplate);
          } else {
            sceneSelector.next();
          }
        });
        cache.set("isResume", {});
        game.state.restart(true, true);
        if (cbStarted) {
          cbStarted();
        }
      }, 1000);
    };

    this.exit = function() {
      factory["sceneSelector"](function(sceneSelector) {
        sceneSelector.reset();
        eventHandler.reset();
        cache.reset();
        game.destroy();
      });
    };

    this.reset = function() {
      this.start();
    };
  }, function error(err) {})
});factory(function(factory) {
  factory.register(true, function imageBuilder(imageBuilderConfig, phaserGame, eventHandler, cache) {


    var builtObjIdsCacheId = "imageBuiltObjIds";

    function getBuiltObjects(callback, cbComplete) {
      cache.get(builtObjIdsCacheId, function(builtObjIds) {
        enumerate(builtObjIds, this, function(builtObjId) {
          cache.get(builtObjId, function(builtObj) {
            callback(builtObj);
          });
        }, cbComplete);
      });
    };

    function mergeConfigurations(sceneConfiguration, imageConfig) {
      for (var prop in imageConfig) {
        sceneConfiguration[prop] = imageConfig[prop];
      };
    };

    this.initialise = function(sceneConfigurations) {
      cache.set(builtObjIdsCacheId, []);
      enumerate(sceneConfigurations, this, function(sceneConfiguration) {
        enumerate(imageBuilderConfig, this, function(imageConfig) {
          if (imageConfig.name == sceneConfiguration.name) {
            var configId = "config_" + sceneConfiguration.name;
            cache.get(configId, function() {}, function() {
              cache.set(configId, sceneConfiguration);
            });
            mergeConfigurations(sceneConfiguration, imageConfig);
          }
        });
      });
    };

    this.loadImage = function(sceneConfig, callback) {
      if (!sceneConfig.hasAnimations) {
        console.log("-------------------LOADING IMAGE (" + sceneConfig.name + ")---------------------");
        phaserGame.load.image(sceneConfig.name, sceneConfig.file);
      }
      callback();
    };

    this.createImage = function(sceneConfig, callback) {
      console.log("-------------------CREATING IMAGE (" + sceneConfig.name + ")---------------------");
      var image = phaserGame.add.image(
        sceneConfig.xPosition,
        sceneConfig.yPosition,
        sceneConfig.name
      );
      if (sceneConfig.anchor == true) {
        image.anchor.setTo(0.5, 0.5);
      }
      image.height = sceneConfig.height;
      image.width = sceneConfig.width;

      var objId = "img_" + sceneConfig.name;
      cache.get(builtObjIdsCacheId, function(objectIds) {
        objectIds.push(objId);
        cache.set(objId, {
          obj: image,
          config: sceneConfig,
          state: {
            isSelected: false
          }
        });
      });
      callback();
    };

    this.getImages = function(callback, cbComplete) {
      getBuiltObjects(function(builtObject) {
        callback(builtObject);
      }, function() {
        if (cbComplete) {
          cbComplete();
        }
      });
    };

    this.getImageConfigById = function(name, callback) {
      enumerate(imageBuilderConfig, this, function(config) {
        if (name == config.name) {
          callback(config);
        }
      });
    };

    this.reset = function() {};
  }, function error(err) {})
});factory(function(factory) {
  factory.register(true, function flyScene(sceneManager, sceneObjBuilder, sceneSelector, eventHandler) {


    var sceneName = "flyScene";
    this.initialise = function() {
      eventHandler.subscribe(function animationComplete(animation, sceneObj) {
        sceneManager.getFocusedSceneObj(function(obj, _sceneConfig, _state) {
          obj.destroy();
        });
      });

      eventHandler.subscribe(function receiveSpriteFocus(sprite, sceneConfig, state) {
        console.log("selected scene object Id ", sprite.Id);
        sceneManager.getFocusedSceneObj(function(obj, _sceneConfig, _state) {
          _state.isSelected = false;
        });
        state.isSelected = true;
        sceneManager.playAllAnimationsForSceneObj(sceneConfig);
      });

      eventHandler.subscribe(function keyPress(keyData) {
        sceneManager.getFocusedSceneObj(function(obj, objConfig) {});
      });

      eventHandler.subscribe(function mouseMove(position) {
        sceneObjBuilder.getImages(function(image, config) {
          if (config.name.indexOf("cursor") >= 0) {
            image.x = position.x;
            image.y = position.y;
          }
        });
      });

    };

    this.load = function() {
      sceneManager.loadScene(sceneName);
    };
    this.create = function() {
      sceneManager.createScene(sceneName);
    };

    this.reset = function() {

    };

  }, function error(err) {})
});factory(function(factory) {
  factory.register(true, function capturePlayerScene(sceneManager, sceneObjBuilder, sceneSelector, eventHandler) {


    var sceneName = "capturePlayerScene";
    this.initialise = function() {

      eventHandler.subscribe(function animationComplete(animation, sceneConfig) {
        if (sceneConfig.name.indexOf("submit") >= 0) {
          //sceneSelector.next();
        }
      });

      eventHandler.subscribe(function receiveSpriteFocus(sprite, sceneConfig, state) {
        sceneManager.getFocusedSceneObj(function(obj, _sceneConfig, _state) {
          _state.isSelected = false;
        });
        if (sceneConfig.name.indexOf("playerCapture") >= 0) {
          sceneObjBuilder.getText(function(text, _sceneConfig, _state) {
            text.text = "";
            _state.isSelected = true;
          });
        } else {
          sceneManager.playAllAnimationsForSceneObj(sceneConfig);
        }
      });

      eventHandler.subscribe(function keyPress(keyData) {
        sceneManager.getFocusedSceneObj(function(inputText, sceneConfig, state) {
          if (inputText.text.length < 14) {
            switch (keyData.keyCode) {
              case 8:
                var text = inputText.text.replaceAt(inputText.text.length - 1, " ");
                text = text.replace(" ", "");
                inputText.text = text;
                break;
              case 13:
                break;
              default:
                isKeyAlphaNumeric(keyData.keyCode, function() {
                  var char = String.fromCharCode(keyData.keyCode).toString();
                  inputText.text += char;
                });
                break;
            };
          } else {
            switch (keyData.keyCode) {
              case 8:
                var text = inputText.text.replaceAt(inputText.text.length - 1, " ");
                text = text.replace(" ", "");
                inputText.text = text;
                break;
            };
          }
        });
      });

      eventHandler.subscribe(function mouseMove(position) {
        sceneObjBuilder.getImages(function(image, config, state) {
          if (config.name.indexOf("cursor") >= 0) {
            image.x = position.x;
            image.y = position.y;
          }
        });
      });
    };

    this.load = function() {
      sceneManager.loadScene(sceneName);
    };

    this.create = function() {
      sceneManager.createScene(sceneName);
    };

    this.reset = function() {

    };

  }, function error(err) {})
});factory(function(factory) {
  factory.register(true, function animationBuilder(animationBuilderConfig, phaserGame, eventHandler, cache) {


    var builtObjIdsCacheId = "animationBuiltObjIds";

    function getBuiltObjects(callback, cbComplete) {
      cache.get(builtObjIdsCacheId, function(builtObjIds) {
        enumerate(builtObjIds, this, function(builtObjId) {
          cache.get(builtObjId, function(builtObj) {
            callback(builtObj);
          });
        }, cbComplete);
      });
    };

    function mergeConfigurations(sceneConfiguration, animationConfig) {
      for (var prop in animationConfig) {
        sceneConfiguration[prop] = animationConfig[prop];
      };
    };

    this.initialise = function(sceneConfigurations, sceneIndex) {
      cache.set(builtObjIdsCacheId, []);
      enumerate(sceneConfigurations, this, function(sceneConfiguration) {
        enumerate(animationBuilderConfig, this, function(animationConfig) {
          if (animationConfig.name == sceneConfiguration.name && sceneConfiguration.hasAnimations) {
            var configId = "config_" + sceneConfiguration.name;
            cache.get(configId, function() {}, function() {
              cache.set(configId, sceneConfiguration);
            });
            mergeConfigurations(sceneConfiguration, animationConfig);
          }
        });
      });
    };

    this.loadAnimation = function(sceneConfig, callback) {
      console.log("-------------------LOADING ANIMATION (" + sceneConfig.name + ")---------------------");
      phaserGame.load.spritesheet(
        sceneConfig.name,
        sceneConfig.file,
        sceneConfig.frameWidth,
        sceneConfig.frameHeight
      );
      callback();
    };

    this.createAnimation = function(sceneConfig, callback) {
      console.log("-------------------CREATING ANIMATION (" + sceneConfig.name + ")---------------------");
      enumerate(sceneConfig.animations, this, function(indexConfig) {

        var animations = [];
        if (indexConfig.startIndex < indexConfig.endIndex) {
          for (var index = indexConfig.startIndex; index <= indexConfig.endIndex; index++) {
            animations.push(index);
          };
        } else {
          for (var index = indexConfig.startIndex; index >= indexConfig.endIndex; index--) {
            animations.push(index);
          };
        }
        var objId = "sprite_" + sceneConfig.name;
        cache.get(objId, function(item) {
          var animation = item.obj.animations.add(sceneConfig.name,
            animations,
            indexConfig.speed,
            indexConfig.repeat,
            true);

          animation.onComplete.add(function() {
            eventHandler.publish(animation, sceneConfig, null, function animationComplete() {}, this);
          }, this);

          objId = "anim_" + indexConfig.name;
          cache.get(builtObjIdsCacheId, function(objectIds) {
            cache.set(objId, {
              obj: animation,
              config: indexConfig,
              state: {
                isSelected: false
              }
            }, function() {
              objectIds.push(objId);
            });
          });
        });

      }, callback);
    };

    this.getAnimations = function(callback, cbComplete) {
      getBuiltObjects(function(builtObject) {
        callback(builtObject);
      }, function() {
        if (cbComplete) {
          cbComplete();
        }
      });
    };

    this.getAnimationConfigById = function(name, callback) {
      enumerate(animationBuilderConfig, this, function(config) {
        if (name == config.name) {
          callback(config);
        }
      });
    };

    this.reset = function() {};
  }, function error(err) {})
});factory(function(factory){ factory.register(false, function workflowConfig(){
 return '{"links":[{"type":"Link","nodeA":"bbd753f6-974a-4851-ab71-474749095975","nodeB":"526a0b38-8e72-42b0-377f-9524912c06ad","text":"","lineAngleAdjust":0,"parallelPart":0.5,"perpendicularPart":0,"Id":"6b97ce36-a57f-4ad1-a696-cf4ea49509cf"},{"type":"Link","nodeA":"49d0482f-3cd8-4e03-1e36-3658e3b56339","nodeB":"526a0b38-8e72-42b0-377f-9524912c06ad","text":"","lineAngleAdjust":0,"parallelPart":0.5,"perpendicularPart":0,"Id":"a64dc79b-f209-43dd-3507-928a92809dd1"},{"type":"Link","nodeA":"a2d861e9-2cac-4015-b8aa-3cba1e18d105","nodeB":"526a0b38-8e72-42b0-377f-9524912c06ad","text":"","lineAngleAdjust":0,"parallelPart":0.5,"perpendicularPart":0,"Id":"3a1805a1-d9a6-40c7-f86b-ee7fd3b4b8c0"},{"type":"Link","nodeA":"4bae7b23-3556-4174-67ba-e251528beb42","nodeB":"526a0b38-8e72-42b0-377f-9524912c06ad","text":"","lineAngleAdjust":0,"parallelPart":0.5,"perpendicularPart":0,"Id":"47ff9330-f568-4d42-7eea-4208722d670d"},{"type":"Link","nodeA":"f9300dbc-c145-4699-8571-70dd7984d094","nodeB":"526a0b38-8e72-42b0-377f-9524912c06ad","text":"","lineAngleAdjust":0,"parallelPart":0.5,"perpendicularPart":0,"Id":"51aaeda3-3bee-4411-d6d5-2747d5395545"},{"type":"Link","nodeA":"5b1a32f2-c16f-4c89-5da0-50312470274f","nodeB":"526a0b38-8e72-42b0-377f-9524912c06ad","text":"","lineAngleAdjust":0,"parallelPart":0.5,"perpendicularPart":0,"Id":"4e2087db-eb0d-49a4-a7e5-815656ff8100"},{"type":"Link","nodeA":"9bf46a56-7961-4953-940e-910ced09788b","nodeB":"526a0b38-8e72-42b0-377f-9524912c06ad","text":"","lineAngleAdjust":0,"parallelPart":0.5,"perpendicularPart":0,"Id":"4e43060e-e157-4127-a2c7-d5d1202b1148"},{"type":"Link","nodeA":"9080b619-827f-4ebc-ad1b-31b65b816cf5","nodeB":"526a0b38-8e72-42b0-377f-9524912c06ad","text":"","lineAngleAdjust":0,"parallelPart":0.5,"perpendicularPart":0,"Id":"595e10a7-3da0-4487-7958-25d8b604fec5"},{"type":"Link","nodeA":"89692787-542e-45cd-eeff-756545c09c05","nodeB":"526a0b38-8e72-42b0-377f-9524912c06ad","text":"","lineAngleAdjust":0,"parallelPart":0.5,"perpendicularPart":0,"Id":"97aa53b7-1b19-4887-bc06-ec23b2f99e65"},{"type":"Link","nodeA":"755f4473-0341-4345-f1bf-72222ada38de","nodeB":"526a0b38-8e72-42b0-377f-9524912c06ad","text":"","lineAngleAdjust":0,"parallelPart":0.5,"perpendicularPart":0,"Id":"eb93ff34-61e4-43bc-8916-ebcda877e9b6"},{"type":"Link","nodeA":"526a0b38-8e72-42b0-377f-9524912c06ad","nodeB":"bbd753f6-974a-4851-ab71-474749095975","text":"","lineAngleAdjust":0,"parallelPart":0.5,"perpendicularPart":0,"Id":"484d0df8-8b86-42c9-e166-1cf307e748e8"},{"type":"Link","nodeA":"526a0b38-8e72-42b0-377f-9524912c06ad","nodeB":"49d0482f-3cd8-4e03-1e36-3658e3b56339","text":"","lineAngleAdjust":0,"parallelPart":0.5,"perpendicularPart":0,"Id":"7f31cb02-60ac-475c-f0f5-151e3b532143"},{"type":"Link","nodeA":"526a0b38-8e72-42b0-377f-9524912c06ad","nodeB":"a2d861e9-2cac-4015-b8aa-3cba1e18d105","text":"","lineAngleAdjust":0,"parallelPart":0.5,"perpendicularPart":0,"Id":"aca2087b-b84c-4d37-bf5a-d77168e4ef71"},{"type":"Link","nodeA":"526a0b38-8e72-42b0-377f-9524912c06ad","nodeB":"4bae7b23-3556-4174-67ba-e251528beb42","text":"","lineAngleAdjust":0,"parallelPart":0.5,"perpendicularPart":0,"Id":"b73255d2-c13c-4de6-3104-f34f95a5714a"},{"type":"Link","nodeA":"526a0b38-8e72-42b0-377f-9524912c06ad","nodeB":"f9300dbc-c145-4699-8571-70dd7984d094","text":"","lineAngleAdjust":0,"parallelPart":0.5,"perpendicularPart":0,"Id":"cd71f992-191c-49c5-acc3-98c5b9aece7a"},{"type":"Link","nodeA":"526a0b38-8e72-42b0-377f-9524912c06ad","nodeB":"5b1a32f2-c16f-4c89-5da0-50312470274f","text":"","lineAngleAdjust":0,"parallelPart":0.5,"perpendicularPart":0,"Id":"ab494469-609a-401e-a325-00ce4d359201"},{"type":"Link","nodeA":"526a0b38-8e72-42b0-377f-9524912c06ad","nodeB":"9bf46a56-7961-4953-940e-910ced09788b","text":"","lineAngleAdjust":0,"parallelPart":0.5,"perpendicularPart":0,"Id":"a480a7ce-f7e9-4e7d-8574-fc06d5ffc61d"},{"type":"Link","nodeA":"526a0b38-8e72-42b0-377f-9524912c06ad","nodeB":"9080b619-827f-4ebc-ad1b-31b65b816cf5","text":"","lineAngleAdjust":0,"parallelPart":0.5,"perpendicularPart":0,"Id":"a25a3682-22b3-4dc7-2606-7e3f460b9000"},{"type":"Link","nodeA":"526a0b38-8e72-42b0-377f-9524912c06ad","nodeB":"89692787-542e-45cd-eeff-756545c09c05","text":"","lineAngleAdjust":0,"parallelPart":0.5,"perpendicularPart":0,"Id":"35b6e728-c580-43be-4eb7-7d3cbbb9b65d"},{"type":"Link","nodeA":"526a0b38-8e72-42b0-377f-9524912c06ad","nodeB":"755f4473-0341-4345-f1bf-72222ada38de","text":"","lineAngleAdjust":0,"parallelPart":0.5,"perpendicularPart":0,"Id":"10844f43-d82d-4008-f5c7-1f066a4a9289"},{"type":"Link","nodeA":"dd676895-49be-4865-c757-7fc4839871a3","nodeB":"526a0b38-8e72-42b0-377f-9524912c06ad","text":"load","lineAngleAdjust":0,"parallelPart":0.5,"perpendicularPart":0,"Id":"d1a06bd5-9a18-447e-3a15-4864b53d2130"},{"type":"Link","nodeA":"8e78a92b-ce35-4c0e-6397-2a24fa428ca5","nodeB":"dd676895-49be-4865-c757-7fc4839871a3","text":"load","lineAngleAdjust":0,"parallelPart":0.5,"perpendicularPart":0,"Id":"59f60b35-75b4-430e-a956-e37acc3df72c"}],"nodes":[{"x":839,"y":31,"mouseOffsetX":0,"mouseOffsetY":0,"isAcceptState":true,"text":"lvl1","Id":"755f4473-0341-4345-f1bf-72222ada38de"},{"x":386,"y":363,"mouseOffsetX":0,"mouseOffsetY":0,"isAcceptState":false,"text":"lvl10","Id":"bbd753f6-974a-4851-ab71-474749095975"},{"x":432,"y":611,"mouseOffsetX":0,"mouseOffsetY":0,"isAcceptState":false,"text":"lvl9","Id":"49d0482f-3cd8-4e03-1e36-3658e3b56339"},{"x":639,"y":755,"mouseOffsetX":0,"mouseOffsetY":0,"isAcceptState":false,"text":"lvl8","Id":"a2d861e9-2cac-4015-b8aa-3cba1e18d105"},{"x":921,"y":804,"mouseOffsetX":0,"mouseOffsetY":0,"isAcceptState":false,"text":"lvl7","Id":"4bae7b23-3556-4174-67ba-e251528beb42"},{"x":1181,"y":744,"mouseOffsetX":0,"mouseOffsetY":0,"isAcceptState":false,"text":"lvl6","Id":"f9300dbc-c145-4699-8571-70dd7984d094"},{"x":1270,"y":595,"mouseOffsetX":-5,"mouseOffsetY":13,"isAcceptState":false,"text":"lvl5","Id":"5b1a32f2-c16f-4c89-5da0-50312470274f"},{"x":1377,"y":457,"mouseOffsetX":5,"mouseOffsetY":-7,"isAcceptState":false,"text":"lvl4","Id":"9bf46a56-7961-4953-940e-910ced09788b"},{"x":1341,"y":269,"mouseOffsetX":9,"mouseOffsetY":1,"isAcceptState":false,"text":"lvl3","Id":"9080b619-827f-4ebc-ad1b-31b65b816cf5"},{"x":1168,"y":114,"mouseOffsetX":0,"mouseOffsetY":0,"isAcceptState":true,"text":"lvl2","Id":"89692787-542e-45cd-eeff-756545c09c05"},{"x":871,"y":378,"mouseOffsetX":0,"mouseOffsetY":0,"isAcceptState":false,"text":"score","Id":"526a0b38-8e72-42b0-377f-9524912c06ad"},{"x":55,"y":49,"mouseOffsetX":0,"mouseOffsetY":0,"isAcceptState":false,"text":"loader","Id":"8e78a92b-ce35-4c0e-6397-2a24fa428ca5"},{"x":459,"y":81,"mouseOffsetX":0,"mouseOffsetY":0,"isAcceptState":false,"text":"capPla","Id":"dd676895-49be-4865-c757-7fc4839871a3"}]}'; 
 }, function error(err){})});factory(function(factory){ factory.register(false, function textBuilderConfig(){
 return '[{"align":"center","fill":"#9343ff","font":"16px Arial","name":"playerCaptureText","text":"enter text here..."},{"align":"center","fill":"#9343ff","font":"12px Arial","name":"timerText","text":"00:00:00"},{"align":"center","fill":"#9343ff","font":"12px Arial","name":"playerScoreText1","text":""},{"align":"center","fill":"#9343ff","font":"12px Arial","name":"playerScoreText2","text":""},{"align":"center","fill":"#9343ff","font":"12px Arial","name":"playerScoreText3","text":""},{"align":"center","fill":"#9343ff","font":"12px Arial","name":"playerScoreText4","text":""},{"align":"center","fill":"#9343ff","font":"12px Arial","name":"playerScoreText5","text":""}]'; 
 }, function error(err){})});factory(function(factory){ factory.register(false, function spriteBuilderConfig(){
 return '[{"file":"../assets/capturePlayer.png","name":"playerCapture"},{"file":"../assets/play_btn.png","name":"playButton"},{"file":"../assets/close_btn.png","name":"closeButton"},{"file":"../assets/submit_btn.png","name":"submitButton"},{"file":"../assets/preloader.png","name":"preloader"},{"file":"../assets/fly.png","name":"fly1"},{"file":"../assets/fly.png","name":"fly2"},{"file":"../assets/fly.png","name":"fly3"},{"file":"../assets/fly.png","name":"fly4"},{"file":"../assets/fly.png","name":"fly5"},{"file":"../assets/fly.png","name":"fly6"},{"file":"../assets/fly.png","name":"fly7"},{"file":"../assets/fly.png","name":"fly8"},{"file":"../assets/fly.png","name":"fly9"},{"file":"../assets/fly.png","name":"fly10"}]'; 
 }, function error(err){})});factory(function(factory){ factory.register(false, function sceneSelectorConfig(){
 return '[{"Id":"8e78a92b-ce35-4c0e-6397-2a24fa428ca5","name":"Loader Scene","template":"preloaderScene"},{"Id":"dd676895-49be-4865-c757-7fc4839871a3","name":"Capture Player Scene","template":"capturePlayerScene"},{"Id":"526a0b38-8e72-42b0-377f-9524912c06ad","name":"Scoreboard Scene","template":"scoreboardScene"},{"Id":"89692787-542e-45cd-eeff-756545c09c05","name":"level2","template":"flyScene"},{"Id":"9080b619-827f-4ebc-ad1b-31b65b816cf5","name":"level3","template":"flyScene"},{"Id":"9bf46a56-7961-4953-940e-910ced09788b","name":"level4","template":"flyScene"},{"Id":"5b1a32f2-c16f-4c89-5da0-50312470274f","name":"level5","template":"flyScene"},{"Id":"f9300dbc-c145-4699-8571-70dd7984d094","name":"level6","template":"flyScene"},{"Id":"4bae7b23-3556-4174-67ba-e251528beb42","name":"level7","template":"flyScene"},{"Id":"a2d861e9-2cac-4015-b8aa-3cba1e18d105","name":"level8","template":"flyScene"},{"Id":"49d0482f-3cd8-4e03-1e36-3658e3b56339","name":"level9","template":"flyScene"},{"Id":"bbd753f6-974a-4851-ab71-474749095975","name":"level10","template":"flyScene"},{"Id":"755f4473-0341-4345-f1bf-72222ada38de","name":"level1","template":"flyScene"}]'; 
 }, function error(err){})});factory(function(factory){ factory.register(false, function phaserGameConfig(){
 return '{"width":800,"height":600,"gameRef":null,"title":"letfly"}'; 
 }, function error(err){})});factory(function(factory){ factory.register(false, function loaderscenepreloaderSceneConfig(){
 return '[{"anchor":false,"enabled":true,"hasAnimations":true,"height":600,"isStatic":true,"name":"preloader","priority":1,"width":800,"xPosition":0,"xScale":1,"yPosition":0,"yScale":1,"type":"sprite | animation"},{"anchor":true,"enabled":true,"hasAnimations":false,"height":40,"isStatic":false,"name":"cursor","priority":2,"width":40,"xPosition":0,"xScale":1,"yPosition":0,"yScale":1,"type":"image"}]'; 
 }, function error(err){})});factory(function(factory){ factory.register(false, function level7flySceneConfig(){
 return '[{"anchor":true,"enabled":true,"hasAnimations":false,"height":60,"isStatic":true,"name":"cursor","priority":4,"width":60,"xPosition":0,"xScale":1,"yPosition":0,"yScale":1,"type":"image"},{"anchor":false,"enabled":true,"hasAnimations":false,"height":250,"isStatic":true,"name":"timerText","priority":3,"width":500,"xPosition":20,"xScale":3,"yPosition":20,"yScale":3,"type":"text"},{"anchor":true,"enabled":true,"hasAnimations":true,"height":80,"isStatic":true,"name":"fly10","priority":2,"width":80,"xPosition":220,"xScale":1,"yPosition":220,"yScale":1,"type":"sprite | animation"},{"anchor":true,"enabled":true,"hasAnimations":true,"height":80,"isStatic":true,"name":"fly9","priority":2,"width":80,"xPosition":80,"xScale":1,"yPosition":350,"yScale":1,"type":"sprite | animation"},{"anchor":true,"enabled":true,"hasAnimations":true,"height":80,"isStatic":true,"name":"fly8","priority":2,"width":80,"xPosition":500,"xScale":1,"yPosition":200,"yScale":1,"type":"sprite | animation"},{"anchor":true,"enabled":true,"hasAnimations":true,"height":80,"isStatic":true,"name":"fly7","priority":2,"width":80,"xPosition":680,"xScale":1,"yPosition":450,"yScale":1,"type":"sprite | animation"},{"anchor":true,"enabled":true,"hasAnimations":true,"height":80,"isStatic":true,"name":"fly6","priority":2,"width":80,"xPosition":700,"xScale":1,"yPosition":220,"yScale":1,"type":"sprite | animation"},{"anchor":true,"enabled":true,"hasAnimations":true,"height":80,"isStatic":true,"name":"fly5","priority":2,"width":80,"xPosition":220,"xScale":1,"yPosition":500,"yScale":1,"type":"sprite | animation"},{"anchor":true,"enabled":true,"hasAnimations":true,"height":80,"isStatic":true,"name":"fly4","priority":2,"width":80,"xPosition":60,"xScale":1,"yPosition":220,"yScale":1,"type":"sprite | animation"},{"anchor":true,"enabled":true,"hasAnimations":true,"height":120,"isStatic":true,"name":"fly3","priority":2,"width":120,"xPosition":400,"xScale":1,"yPosition":50,"yScale":1,"type":"sprite | animation"},{"anchor":true,"enabled":true,"hasAnimations":true,"height":80,"isStatic":true,"name":"fly2","priority":2,"width":80,"xPosition":420,"xScale":1,"yPosition":312,"yScale":1,"type":"sprite | animation"},{"anchor":true,"enabled":true,"hasAnimations":true,"height":80,"isStatic":true,"name":"fly1","priority":2,"width":80,"xPosition":50,"xScale":1,"yPosition":20,"yScale":1,"type":"sprite | animation"},{"anchor":false,"enabled":true,"hasAnimations":false,"height":600,"isStatic":true,"name":"flyBackground","priority":1,"width":800,"xPosition":0,"xScale":3,"yPosition":0,"yScale":3,"type":"image"}]'; 
 }, function error(err){})});factory(function(factory){ factory.register(false, function level3flySceneConfig(){
 return '[{"anchor":true,"enabled":true,"hasAnimations":false,"height":60,"isStatic":true,"name":"cursor","priority":4,"width":60,"xPosition":0,"xScale":1,"yPosition":0,"yScale":1,"type":"image"},{"anchor":false,"enabled":true,"hasAnimations":false,"height":250,"isStatic":true,"name":"timerText","priority":3,"width":500,"xPosition":20,"xScale":3,"yPosition":20,"yScale":3,"type":"text"},{"anchor":true,"enabled":true,"hasAnimations":true,"height":80,"isStatic":true,"name":"fly10","priority":2,"width":80,"xPosition":220,"xScale":1,"yPosition":220,"yScale":1,"type":"sprite | animation"},{"anchor":true,"enabled":true,"hasAnimations":true,"height":80,"isStatic":true,"name":"fly9","priority":2,"width":80,"xPosition":80,"xScale":1,"yPosition":350,"yScale":1,"type":"sprite | animation"},{"anchor":true,"enabled":true,"hasAnimations":true,"height":80,"isStatic":true,"name":"fly8","priority":2,"width":80,"xPosition":500,"xScale":1,"yPosition":200,"yScale":1,"type":"sprite | animation"},{"anchor":true,"enabled":true,"hasAnimations":true,"height":80,"isStatic":true,"name":"fly7","priority":2,"width":80,"xPosition":680,"xScale":1,"yPosition":450,"yScale":1,"type":"sprite | animation"},{"anchor":true,"enabled":true,"hasAnimations":true,"height":80,"isStatic":true,"name":"fly6","priority":2,"width":80,"xPosition":700,"xScale":1,"yPosition":220,"yScale":1,"type":"sprite | animation"},{"anchor":true,"enabled":true,"hasAnimations":true,"height":80,"isStatic":true,"name":"fly5","priority":2,"width":80,"xPosition":220,"xScale":1,"yPosition":500,"yScale":1,"type":"sprite | animation"},{"anchor":true,"enabled":true,"hasAnimations":true,"height":80,"isStatic":true,"name":"fly4","priority":2,"width":80,"xPosition":60,"xScale":1,"yPosition":220,"yScale":1,"type":"sprite | animation"},{"anchor":true,"enabled":true,"hasAnimations":true,"height":120,"isStatic":true,"name":"fly3","priority":2,"width":120,"xPosition":400,"xScale":1,"yPosition":50,"yScale":1,"type":"sprite | animation"},{"anchor":true,"enabled":true,"hasAnimations":true,"height":80,"isStatic":true,"name":"fly2","priority":2,"width":80,"xPosition":420,"xScale":1,"yPosition":312,"yScale":1,"type":"sprite | animation"},{"anchor":true,"enabled":true,"hasAnimations":true,"height":80,"isStatic":true,"name":"fly1","priority":2,"width":80,"xPosition":50,"xScale":1,"yPosition":20,"yScale":1,"type":"sprite | animation"},{"anchor":false,"enabled":true,"hasAnimations":false,"height":600,"isStatic":true,"name":"flyBackground","priority":1,"width":800,"xPosition":0,"xScale":3,"yPosition":0,"yScale":3,"type":"image"}]'; 
 }, function error(err){})});factory(function(factory){ factory.register(false, function level10flySceneConfig(){
 return '[{"anchor":true,"enabled":true,"hasAnimations":false,"height":60,"isStatic":true,"name":"cursor","priority":4,"width":60,"xPosition":0,"xScale":1,"yPosition":0,"yScale":1,"type":"image"},{"anchor":false,"enabled":true,"hasAnimations":false,"height":250,"isStatic":true,"name":"timerText","priority":3,"width":500,"xPosition":20,"xScale":3,"yPosition":20,"yScale":3,"type":"text"},{"anchor":true,"enabled":true,"hasAnimations":true,"height":80,"isStatic":true,"name":"fly10","priority":2,"width":80,"xPosition":220,"xScale":1,"yPosition":220,"yScale":1,"type":"sprite | animation"},{"anchor":true,"enabled":true,"hasAnimations":true,"height":80,"isStatic":true,"name":"fly9","priority":2,"width":80,"xPosition":80,"xScale":1,"yPosition":350,"yScale":1,"type":"sprite | animation"},{"anchor":true,"enabled":true,"hasAnimations":true,"height":80,"isStatic":true,"name":"fly8","priority":2,"width":80,"xPosition":500,"xScale":1,"yPosition":200,"yScale":1,"type":"sprite | animation"},{"anchor":true,"enabled":true,"hasAnimations":true,"height":80,"isStatic":true,"name":"fly7","priority":2,"width":80,"xPosition":680,"xScale":1,"yPosition":450,"yScale":1,"type":"sprite | animation"},{"anchor":true,"enabled":true,"hasAnimations":true,"height":80,"isStatic":true,"name":"fly6","priority":2,"width":80,"xPosition":700,"xScale":1,"yPosition":220,"yScale":1,"type":"sprite | animation"},{"anchor":true,"enabled":true,"hasAnimations":true,"height":80,"isStatic":true,"name":"fly5","priority":2,"width":80,"xPosition":220,"xScale":1,"yPosition":500,"yScale":1,"type":"sprite | animation"},{"anchor":true,"enabled":true,"hasAnimations":true,"height":80,"isStatic":true,"name":"fly4","priority":2,"width":80,"xPosition":60,"xScale":1,"yPosition":220,"yScale":1,"type":"sprite | animation"},{"anchor":true,"enabled":true,"hasAnimations":true,"height":120,"isStatic":true,"name":"fly3","priority":2,"width":120,"xPosition":400,"xScale":1,"yPosition":50,"yScale":1,"type":"sprite | animation"},{"anchor":true,"enabled":true,"hasAnimations":true,"height":80,"isStatic":true,"name":"fly2","priority":2,"width":80,"xPosition":420,"xScale":1,"yPosition":312,"yScale":1,"type":"sprite | animation"},{"anchor":true,"enabled":true,"hasAnimations":true,"height":80,"isStatic":true,"name":"fly1","priority":2,"width":80,"xPosition":50,"xScale":1,"yPosition":20,"yScale":1,"type":"sprite | animation"},{"anchor":false,"enabled":true,"hasAnimations":false,"height":600,"isStatic":true,"name":"flyBackground","priority":1,"width":800,"xPosition":0,"xScale":3,"yPosition":0,"yScale":3,"type":"image"}]'; 
 }, function error(err){})});factory(function(factory){ factory.register(false, function imageBuilderConfig(){
 return '[{"file":"../assets/cursor.png","name":"cursor"},{"file":"../assets/playerScore.png","name":"playerScore"},{"file":"../assets/scoreboard_heading.png","name":"scoreboardHeading"},{"file":"../assets/scoreboard.png","name":"scoreboardBackground"},{"file":"../assets/background.jpg","name":"flyBackground"},{"file":"../assets/capturePlayer.png","name":"playerCapture"}]'; 
 }, function error(err){})});factory(function(factory){ factory.register(false, function animationBuilderConfig(){
 return '[{"animations":[{"startIndex":0,"endIndex":1,"name":"play","start":false,"repeat":false}],"frameHeight":46,"frameWidth":150,"name":"playButton","speed":10},{"animations":[{"startIndex":1,"endIndex":0,"name":"play","start":false,"repeat":false}],"frameHeight":46,"frameWidth":150,"name":"closeButton","speed":10},{"animations":[{"startIndex":1,"endIndex":0,"name":"play","start":false,"repeat":false}],"frameHeight":46,"frameWidth":150,"name":"submitButton","speed":0},{"animations":[{"startIndex":0,"endIndex":168,"name":"play","start":true,"repeat":false}],"frameHeight":600,"frameWidth":800,"name":"preloader","speed":0},{"animations":[{"startIndex":0,"endIndex":15,"name":"alive","start":true,"repeat":true},{"startIndex":16,"endIndex":21,"name":"dead","start":false,"repeat":false}],"frameHeight":128,"frameWidth":128,"name":"fly1","speed":10},{"animations":[{"startIndex":0,"endIndex":15,"name":"alive2","start":true,"repeat":true},{"startIndex":16,"endIndex":21,"name":"dead2","start":false,"repeat":false}],"frameHeight":128,"frameWidth":128,"name":"fly2","speed":10},{"animations":[{"startIndex":0,"endIndex":15,"name":"alive3","start":true,"repeat":true},{"startIndex":16,"endIndex":21,"name":"dead3","start":false,"repeat":false}],"frameHeight":128,"frameWidth":128,"name":"fly3","speed":10},{"animations":[{"startIndex":0,"endIndex":15,"name":"alive","start":true,"repeat":true},{"startIndex":16,"endIndex":21,"name":"dead","start":false,"repeat":false}],"frameHeight":128,"frameWidth":128,"name":"fly4","speed":10},{"animations":[{"startIndex":0,"endIndex":15,"name":"alive","start":true,"repeat":true},{"startIndex":16,"endIndex":21,"name":"dead","start":false,"repeat":false}],"frameHeight":128,"frameWidth":128,"name":"fly5","speed":10},{"animations":[{"startIndex":0,"endIndex":15,"name":"alive","start":true,"repeat":true},{"startIndex":16,"endIndex":21,"name":"dead","start":false,"repeat":false}],"frameHeight":128,"frameWidth":128,"name":"fly6","speed":10},{"animations":[{"startIndex":0,"endIndex":15,"name":"alive","start":true,"repeat":true},{"startIndex":16,"endIndex":21,"name":"dead","start":false,"repeat":false}],"frameHeight":128,"frameWidth":128,"name":"fly7","speed":10},{"animations":[{"startIndex":0,"endIndex":15,"name":"alive","start":true,"repeat":true},{"startIndex":16,"endIndex":21,"name":"dead","start":false,"repeat":false}],"frameHeight":128,"frameWidth":128,"name":"fly8","speed":10},{"animations":[{"startIndex":0,"endIndex":15,"name":"alive","start":true,"repeat":true},{"startIndex":16,"endIndex":21,"name":"dead","start":false,"repeat":false}],"frameHeight":128,"frameWidth":128,"name":"fly9","speed":10},{"animations":[{"startIndex":0,"endIndex":15,"name":"alive10","start":true,"repeat":true},{"startIndex":16,"endIndex":21,"name":"dead19","start":false,"repeat":false}],"frameHeight":128,"frameWidth":128,"name":"fly10","speed":10}]'; 
 }, function error(err){})});