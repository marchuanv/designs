function generateGUID(argument) {
    function S4() {
        return (((1 + Math.random()) * 0x10000) |0).toString(16).substring(1); 
    }
    return (S4() + S4() + "-" + S4() + "-4" + S4().substr(0, 3) + "-" + S4() + "-" + S4() + S4() + S4()).toLowerCase();
};

function titleCase(str) {
    return str
        .toLowerCase()
        .split(' ')
        .map(function(word) {
            return word[0].toUpperCase() + word.substr(1);
        })
        .join(' ');
};

function getFunctionName(func) {
    var ret = func.toString();
    ret = ret.substr('function '.length);
    ret = ret.substr(0, ret.indexOf('('));
    return ret;
};

function getFunctionArguments(func){
	var args = func.toString().
  		replace(/[\r\n\s]+/g, ' ').
  		match(/function\s*\w*\s*\((.*?)\)/)[1].split (/\s*,\s*/);
  	return args;
}

function enumerate(collection, context, callback, callbackComplete){

	if (!collection){
		throw "colection not supplied for enumeration.";
	}
	if (!context){
		throw "context not supplied for callbacks.";
	}
	if (!callback){
		throw "callback not supplied.";
	}
	if (typeof callback !== 'function'){
		throw "callback not supplied.";
	}
	for (var i = collection.length - 1; i >= 0; i--) {
		var item = collection[i];
		var exit = false;
		if (item != undefined){
			callback.call(context, item, function setCondition(condition, cbCondition){
				if (condition == true){
					cbCondition();
				}
			}, function remove(){
				collection.splice(i,1);
			},function _break(){
				exit = true;
			},function replace(newItem){
				collection[i] = newItem;
			},function begin(){
			},function end(){
			});
		}
		if (exit){
			break;
		}
	};
	if (callbackComplete){
		callbackComplete.call(context);
	}
};

function escapePath(_path){
	var newPath = _path.replace(/[\\]/gm,'/');
	return newPath;
};

function generateRandomNumber(min, max){
	return Math.floor(Math.random() * (max - min + 1)) + min;
};

function sortArray(array, numericSortingProperty){
	var sortCount = array.length * 2;
	for (var i = sortCount; i > 0; i--) {
		array.sort(function(obj1,obj2){
			return obj1[numericSortingProperty] - obj2[numericSortingProperty];
		});
	}			
	array.reverse();
};

function sleep(milliseconds) {
  var start = new Date().getTime();
  for (var i = 0; i < 1e7; i++) {
    if ((new Date().getTime() - start) > milliseconds){
      break;
    }
  }
};

function isKeyAlphaNumeric(keyCode, cbDone){
	if ((keyCode >= 65 && keyCode <= 90) || (keyCode >= 48 && keyCode <= 57)) {
		cbDone();
	}
}

function getFileName(filePath){
	return path.basename(filePath);
};

function getDirectories (srcpath, cbDir, cbComplete, cbFail) {
	try{
		var _srcpath = escapePath(srcpath);
		var resolvedPath = path.resolve(_srcpath);
	  	var dirs = fs.readdirSync(_srcpath);
	    if (dirs.length > 0){
		    for (var i = dirs.length - 1; i >= 0; i--) {
		    	var filePath = path.join(resolvedPath, dirs[i]);
		    	if (fs.statSync(filePath).isDirectory()){
			    	var resolvedDir =  escapePath(filePath);
			    	cbDir(resolvedDir);
		    	}
		    };
	    }
	    cbComplete();
	}catch(err){
		cbFail(err);
	}
};

function getFiles(srcpath, cbFile, cbComplete, cbFail) {
	try{
		var _srcpath = escapePath(srcpath);
		var files = fs.readdirSync(_srcpath);
	    for (var i = files.length - 1; i >= 0; i--) {
	    	var filePath = path.join(_srcpath, files[i]);
	    	if (fs.statSync(filePath).isFile()){
	    		cbFile(files[i]);
	    	}
	    };
		cbComplete();
	}catch(err){
		cbFail(err);
	}
};

function enumerateDir(parentDir, filters, callback, cbComplete, cbFail, isRoot){

	var _filters = filters.split(',');

	var _parentDir = escapePath(parentDir);
	var _resolvedDir = escapePath(path.resolve(_parentDir));
	
	getFiles(_resolvedDir, function(fileName){
		var filePath = escapePath(path.join(_resolvedDir, fileName));
		enumerate(_filters, this, function(filter){
			if (fileName.endsWith(filter)){
				callback(filePath);											
			}
		});
	}, function complete(){
	}, cbFail);

	var _resolvedChildDir = null;
	getDirectories(_resolvedDir, function(childDir){
		_resolvedChildDir = escapePath(childDir);
		enumerateDir(_resolvedChildDir, filters, callback, cbComplete, cbFail, false);
	}, function complete(){
		if (isRoot === undefined){
			cbComplete();
		}
	}, cbFail);
};

function wrapInFactoryRegister(funcName, bodyCode, cbDone){
	var js = 'window.factory.register(function [funcName](input) { \r\n [bodyCode] 	\r\n}, function constructor(obj){\r\n    Object.seal(obj);\r\n},function errorHandle(errMsg){\r\n    throw errMsg;\r\n});\r\n';
	js = js.replace("[funcName]",funcName);
	js = js.replace("[bodyCode]",bodyCode);
	cbDone(js);
};

function saveFile(fileSpec, data, cbComplete, cbFail){
	try{
		var options = { flag : 'w+',encoding: "utf8" };
		fs.writeFileSync(fileSpec, data, options);
		cbComplete();
	}catch(err){
		cbFail(err);
	}
};

function readFile(fileSpec, cbComplete, cbFail){
	try{
		var data = fs.readFileSync(fileSpec, 'utf8');
		cbComplete(data);
	}catch(err){
		cbFail(err);
	}
};

function removeFile(filePath){
	var _filePath = escapePath(filePath);
	fs.unlinkSync(_filePath);
};

function copyFile(sourceFilePath, destinationFilePath){
	console.log("Copying " + sourceFilePath + " to " + destinationFilePath);
	fs.createReadStream(sourceFilePath).pipe(fs.createWriteStream(destinationFilePath));
};

function cache() {
	
	this.Id = generateGUID();
	var cache = this;
	function getKeys(callback){
		for (var obj in cache){
			var key =obj.toString() 
			if (key.startsWith("_") && !key.startsWith("_keys")){
				callback(key);
			}
		}
	};

	this._keys = [];
	this.isClass = true;

	this.set = function(key, instance, callback, isImmutable){
		var newKey = "_"+key;
		if (cache._keys.indexOf(newKey) == -1){
			cache._keys.push(newKey);
		}
		cache[newKey] = {
			instance: instance,
			immutable: isImmutable
		};
		if (callback){
			callback(instance);
		}
	};

	this.get = function(key, cbFound, cbNotFound){
		var newKey = "_"+key;
		var item = cache[newKey];
		if (item && item.instance){
			cbFound(item.instance);
		}else{
			if (cbNotFound){
				cbNotFound();
			}
		}
	};
	
	this.remove = function(key){
		var newKey = "_"+key;
		delete cache[newKey];
		cache._keys.splice(cache._keys.indexOf(newKey),1);
	};
	
	this.reset = function() {
		var keysToKeep = [];
		getKeys(function(key){
			var item = cache[key];
			if (item.immutable == false || item.immutable == undefined){
				delete cache[key];
			}else{
				keysToKeep.push(key);
			}
		});
		cache._keys = [];
		cache._keys = cache._keys.concat(keysToKeep);
	};
};

function getConfigFromGithub(configName, username, password, cbDone){

	// basic auth
	var gh = new GitHub({
	   username: username,
	   password: password
	});

	var repo = gh.getRepo(username, "designs");
	var path = "lib/config/"+configName+".json";

	repo.getContents('refs/heads/master', path, true, function(http){
		if (http && http.response && http.response.status == 403){
			throw http.response.data.message;
		}
		if (http && http.response && http.response.status == 404){
			cbDone(null, repo, path);
		}
	}).then(function(content) {
		if (content && content.data){
			var payload = content.data;
			cbDone(payload, repo, path);
		}
	});
};

function sendToGithub(configName, username, password, changedConfigArray, cbDone, isNewFile){
	getConfigFromGithub(configName, username, password, function(payload, repository, repoFilePath){
		var jsonStr = JSON.stringify(changedConfigArray, null, 4);
		repository.writeFile("designer", repoFilePath, jsonStr, "auto commit config by designer",{}).then(function() {
		  cbDone();
		}, function() {
		  // one or more failed
		});
	});
};

function zipFile(inputDirPath, outputFilePath, cbComplete, cbFail){
	var archive = archiver('zip');
	var output = fs.createWriteStream(outputFilePath);
	archive.on('error', function(err){
	   cbFail(err);
	});
	output.on('close', function () {
	    console.log(archive.pointer() + ' total bytes');
	    console.log('archiver has been finalized and the output file descriptor has closed.');
		
		output.close();
		output= null;
		archive = null;

		cbComplete();
	});
	archive.pipe(output);
	archive.directory(inputDirPath, inputDirPath);
	archive.finalize();
};

function httpGet(path, cbDone){
	var url = "http://"+window.location.host + path;
	$.post(url, function(data){
		cbDone(data);
	});
};

String.prototype.replaceAt=function(index, character) {
    return this.substr(0, index) + character + this.substr(index+character.length);
};



var fs;
var path;
var archiver;

if (typeof module !== 'undefined' && module.exports) {
	fs = require('fs');
	path = require('path');
	archiver = require('archiver');
	
	module.exports = {
		titleCase: titleCase,
		getFiles: getFiles,
		readFile: readFile,
		saveFile: saveFile,
		wrapInFactoryRegister: wrapInFactoryRegister,
		getDirectories: getDirectories,
		enumerateDir: enumerateDir,
		removeFile:removeFile,
		enumerate: enumerate,
		getFileName: getFileName,
		copyFile: copyFile,
		zipFile: zipFile
	};
} function getAllDependeciesFromCache(callback){
	window.cache.get("dependencies",function(dependencies){
		callback(dependencies);
	},function(){
		var dependencies = [];
		window.cache.set("dependencies", dependencies, null, true);
		callback(dependencies);
	});
};

function getFactoryInstanceIds(callback){
	var allIds = [];
	window.cache.get("ids",function(allIdsArray){
		allIds = allIdsArray;
	},function(){
		window.cache.set("ids", allIds);
	});
	callback(allIds);
};

function getDependencyItemFromCache(callbackItem, callbackComplete){
	getAllDependeciesFromCache(function(dependencies){
		enumerate(dependencies, this, function item(dep){
			callbackItem(dep);
		},function(){
			callbackComplete();
		});
	});
};

function ctorClass(type, params){
	var obj = Reflect.construct(type, params);
	obj["isClass"] = true;
	if (!obj.reset){
		throw  (Id + " does not have a function called reset.");
	}
	return obj;
}

function ctor(Id, type, params, isClass, isSingleton){
	getFactoryInstanceIds(function(allIds){
		if (Id.endsWith("cache")){
			allIds.push(Id);
			window.cache.set(Id, window.cache, null, isSingleton);
		}else if (isClass) {
			var obj = ctorClass(type, params);
			allIds.push(Id);
			window.cache.set(Id, obj, null, isSingleton);
		}else {
			var obj = type(params);
			try {
				obj = JSON.parse(obj);
			} catch(err) {
				console.log("Factory: there was an error pasring config for " + Id);
			}
			allIds.push(Id);
			window.cache.set(Id, obj, null, isSingleton);
		}
	});
};

function ensureInstance(Id, params, newClass, isClass, isSingleton, cbCreated){
	window.cache.get(Id, function found(instance){
		cbCreated(instance);
	},function notFound(){
		console.log("creating instance for "+Id);
		ctor(Id, newClass, params, isClass, isSingleton);
		ensureInstance(Id, params, newClass, isClass, isSingleton, cbCreated);
	});
};

function getParameters(typeName, cbFound, cbNotFound){
	var params = [];
	var totalNoDep = 0;
	var paramTypes = [];
	var isClass;
	var type;
	getDependencyItemFromCache(function item(dep){
		if (dep.typeName == typeName && dep.dependantTypeName){
			type = dep.type;
			isClass = dep.isClass;
			var depId = "_"+dep.dependantTypeName;
			totalNoDep = dep.totalNoDep;
			paramTypes.push(dep.dependantTypeName);
			window.cache.get(depId, function complete(instance){
				params.push(instance);
			});
		}else if (dep.typeName == typeName){
			type = dep.type;
			isClass = dep.isClass;
		}
	},function complete(){
		if (totalNoDep == params.length){
			cbFound(params, type, isClass);
		}else{
			cbNotFound(paramTypes);
		}
	});
};

function createGetInstanceFunction(typeName, isSingleton){
	window.cache.get("factoryFunctions", function(factoryFunctions){
		cache.set(typeName, function(cbFound){
			getParameters(typeName, function found(params, type, _isClass){
				var Id = "_"+typeName;
				ensureInstance(Id, params, type, _isClass, isSingleton, function found(instance){
					cbFound(instance);
				});
			},function notFound(paramTypes){
				enumerate(paramTypes, this, function item(depType){
					window.cache.get(depType, function(func){
						func(function(){
						});
					},function(){
						throw "can't find depend type "+depType;
					});
				},function complete(){
					window.cache.get(typeName, function(func){
						func(function(instance){
							cbFound(instance);
						});
					},function(){
						throw "can't find type "+typeName;
					});
				});
			});
		},function(func){
			window.cache.get(typeName, function(func){
				factoryFunctions[typeName] = func;
			});
		},true);
	});
};

function register(isClass, isSingleton, ctor, errCallback){
	if (typeof ctor !== 'function'){
		var err = new Error();
		throw "failed to register type, one or more callback parameters are not of type function or are missing. STACK: /n " + err.stack;
	} else {
		var typeName = getFunctionName(ctor);
		var args = getFunctionArguments(ctor);
        var depCount = args.length;
		if (args.length == 1 && args.indexOf("") >= 0){
    		depCount--;
    	}
		enumerate(args, this, function item(arg) {
			getAllDependeciesFromCache(function(dependencies){
				var dep = { 
					Id: generateGUID(), 
					typeName: typeName, 
					dependantTypeName: arg,
					priority: 0,
					type: ctor,
					isClass: isClass,
					totalNoDep: depCount,
					isResolved: false
				};
				dependencies.push(dep);
			});
		},function complete(){
			createGetInstanceFunction(typeName, isSingleton);
		});
	}
};

function reload(cbComplete) {
	console.clear();
	getFactoryInstanceIds(function(allIds) {
		enumerate(allIds, this, function item(instanceId, cbCondition, cbRemove, cbBreak){
			if (instanceId.startsWith("_")){
				window.cache.get(instanceId, function(_instance){
					if (_instance.isClass){
						_instance.reset();
					}
				});
			}
		},function(){
			if (cbComplete){
				cbComplete();
			}
		});
	});
};

function factory(cbReady) {
	if (typeof window.cache === 'function'){
		window.cache = ctorClass(cache,[]);
	}
	window.cache.get("factoryFunctions", function(_factoryFunctions){
		cbReady(_factoryFunctions);
	},function(){
		var factoryFunctions = {
			reload: reload,
			register: register
		};
		window.cache.set("factoryFunctions", factoryFunctions, null, true);
		cbReady(factoryFunctions);
	});
};

var cacheFunc = cache;
factory(function(factory){
	factory.register(true, true, cacheFunc);
});factory(function(factory) {
  factory.register(true, true, function textBuilder(textBuilderConfig, cache) {



    var builtObjIdsCacheId = "textBuiltObjIds";

    function getBuiltObjects(callback, cbComplete) {
      cache.get(builtObjIdsCacheId, function(builtObjIds) {
        enumerate(builtObjIds, this, function(builtObjId) {
          cache.get(builtObjId, function(builtObj) {
            callback(builtObj);
          });
        }, cbComplete);
      });
    };

    function mergeConfigurations(sceneConfiguration, gameObjectConfig) {
      var origName = sceneConfiguration.name;
      var gameObjectConfigClone = JSON.parse(JSON.stringify(gameObjectConfig));
      for (var prop in gameObjectConfigClone) {
        sceneConfiguration[prop] = gameObjectConfigClone[prop];
      };
      sceneConfiguration.name = origName;
    };

    this.initialise = function(sceneConfigurations, sceneIndex) {
      cache.set(builtObjIdsCacheId, []);
      enumerate(sceneConfigurations, this, function(sceneConfiguration) {
        enumerate(textBuilderConfig, this, function(textConfig) {
          var txtId = sceneConfiguration.name.replace(/[0-9]/g, '');
          if (textConfig.name == txtId) {
            var configId = "config_" + sceneConfiguration.name;
            cache.get(configId, function() {}, function() {
              cache.set(configId, sceneConfiguration);
            });
            mergeConfigurations(sceneConfiguration, textConfig);
          }
        });
      });
    };

    this.loadText = function(sceneConfig, callback) {
      callback();
    };

    this.createText = function(sceneConfig, callback) {
      console.log("-------------------CREATING TEXT (" + sceneConfig.name + ")---------------------");
      var textXPos = sceneConfig.xPosition;
      var textYPos = sceneConfig.yPosition;
      if (!sceneConfig.text) {
        sceneConfig.text = "Blank";
      }
      factory.phaserGame(function(phaserGame) {
        var text = phaserGame.add.text(textXPos,
          textYPos,
          sceneConfig.text,
          sceneConfig);
        if (sceneConfig.anchor == true) {
          text.anchor.setTo(0.5, 0.5);
        }
        text.width = sceneConfig.width;
        text.height = sceneConfig.height;
        text.scale.setTo(sceneConfig.xScale, sceneConfig.yScale);

        var objId = "text_" + sceneConfig.name;
        cache.get(builtObjIdsCacheId, function(objectIds) {
          objectIds.push(objId);
          cache.set(objId, {
            obj: text,
            config: sceneConfig,
            state: {
              isSelected: false
            }
          });
        });
        callback();
      });
    };

    this.getText = function(callback, cbComplete) {
      getBuiltObjects(function(builtObject) {
        callback(builtObject);
      }, function() {
        if (cbComplete) {
          cbComplete();
        }
      });
    };

    this.getTextConfigById = function(name, callback) {
      enumerate(textBuilderConfig, this, function(config) {
        if (name == config.name) {
          callback(config);
        }
      });
    };

    this.reset = function() {};
  }, function error(err) {})
});factory(function(factory) {
  factory.register(true, true, function spriteBuilder(spriteBuilderConfig, cache) {



    var builtObjIdsCacheId = "spriteBuiltObjIds";

    function getBuiltObjects(callback, cbComplete) {
      cache.get(builtObjIdsCacheId, function(builtObjIds) {
        enumerate(builtObjIds, this, function(builtObjId) {
          cache.get(builtObjId, function(builtObj) {
            callback(builtObj);
          });
        }, cbComplete);
      });
    };

    function mergeConfigurations(sceneConfiguration, gameObjectConfig) {
      var origName = sceneConfiguration.name;
      var gameObjectConfigClone = JSON.parse(JSON.stringify(gameObjectConfig));
      for (var prop in gameObjectConfigClone) {
        sceneConfiguration[prop] = gameObjectConfigClone[prop];
      };
      sceneConfiguration.name = origName;
    };

    this.initialise = function(sceneConfigurations) {
      cache.set(builtObjIdsCacheId, []);
      enumerate(sceneConfigurations, this, function(sceneConfiguration) {
        enumerate(spriteBuilderConfig, this, function(spriteConfig) {
          var spriteId = sceneConfiguration.name.replace(/[0-9]/g, '');
          if (spriteConfig.name == spriteId) {
            var configId = "config_" + sceneConfiguration.name;
            cache.get(configId, function() {}, function() {
              cache.set(configId, sceneConfiguration);
            });
            mergeConfigurations(sceneConfiguration, spriteConfig);
          }
        });
      });
    };

    this.loadSprite = function(sceneConfig, callback) {
      callback();
    };

    this.createSprite = function(sceneConfig, callback) {
      console.log("-------------------CREATING SPRITE (" + sceneConfig.name + ")---------------------");
      var x = Number(sceneConfig.xPosition);
      var y = Number(sceneConfig.yPosition);
      factory.phaserGame(function(phaserGame) {
        if (!x) {
          x = phaserGame.world.centerX;
        }
        if (!y) {
          y = phaserGame.world.centerY;
        }

        var sprite = phaserGame.add.sprite(x, y, sceneConfig.name);
        phaserGame.physics.enable(sprite, Phaser.Physics.ARCADE)
        sprite.inputEnabled = true;
        sprite.enableBody = true;
        sprite.scale.setTo(sceneConfig.xScale, sceneConfig.yScale);

        if (sceneConfig.width) {
          sprite.width = sceneConfig.width;
        }

        if (sceneConfig.rotation) {
          sprite.rotation = sceneConfig.rotation;
        }

        if (sceneConfig.shape == "circle") {
          sprite.body.setCircle(sceneConfig.radius);
        }

        if (sceneConfig.shape == "rectangle") {
          sprite.body.width = sceneConfig.width;
          sprite.body.height = sceneConfig.height
        }

        if (sceneConfig.dragDrop == true) {
          sprite.input.enableDrag();
        }


        if (sceneConfig.visible == false) {
          sprite.visible = false;
        }

        if (sceneConfig.xAnchorPosition > -1 && sceneConfig.yAnchorPosition > -1) {
          sprite.anchor.setTo(sceneConfig.xAnchorPosition, sceneConfig.yAnchorPosition);
        } else {
          sprite.anchor.setTo(0.5, 0.5);
        }

        sceneConfig.originalWidth = sprite.width;
        var state = {
          isSelected: false
        };

        var objId = "sprite_" + sceneConfig.name;
        cache.get(builtObjIdsCacheId, function(objectIds) {
          objectIds.push(objId);
          cache.set(objId, {
            obj: sprite,
            config: sceneConfig,
            state: state
          });
        });

        callback();
      });
    };

    this.updateSprites = function() {};

    this.getSprites = function(callback, cbComplete) {
      getBuiltObjects(function(builtObject) {
        callback(builtObject);
      }, function() {
        if (cbComplete) {
          cbComplete();
        }
      });
    };

    this.getSpriteConfigById = function(name, callback) {
      enumerate(spriteBuilderConfig, this, function(config) {
        if (name == config.name) {
          callback(config);
        }
      });
    };

    this.reset = function() {};

  }, function error(err) {})
});factory(function(factory) {
  factory.register(true, true, function shapeBuilder(shapeBuilderConfig, cache) {



    var shapeBuiltObjId = "shapeBuiltObjIds";

    function getBuiltObjects(callback, cbComplete) {
      cache.get(shapeBuiltObjId, function(builtObjIds) {
        enumerate(builtObjIds, this, function(builtObjId) {
          cache.get(builtObjId, function(builtObj) {
            callback(builtObj);
          });
        }, cbComplete);
      });
    };

    function mergeConfigurations(sceneConfiguration, gameObjectConfig) {
      var origName = sceneConfiguration.name;
      var gameObjectConfigClone = JSON.parse(JSON.stringify(gameObjectConfig));
      for (var prop in gameObjectConfigClone) {
        sceneConfiguration[prop] = gameObjectConfigClone[prop];
      };
      sceneConfiguration.name = origName;
    };

    this.initialise = function(sceneConfigurations) {
      cache.set(shapeBuiltObjId, []);
      enumerate(sceneConfigurations, this, function(sceneConfiguration) {
        enumerate(shapeBuilderConfig, this, function(_shapeBuilderConfig) {
          var shpId = sceneConfiguration.name.replace(/[0-9]/g, '');
          if (_shapeBuilderConfig.name == shpId) {
            var configId = "config_" + sceneConfiguration.name;
            cache.get(configId, function() {}, function() {
              cache.set(configId, sceneConfiguration);
            });
            mergeConfigurations(sceneConfiguration, _shapeBuilderConfig);
          }
        });
      });
    };

    this.loadShape = function(sceneConfig, callback) {
      callback();
    };

    this.createShape = function(sceneConfig, callback) {
      console.log("-------------------CREATING SHAPE (" + sceneConfig.name + ")---------------------");

      var shape;
      var graphics;
      var graphicsObjId = "graphics_" + sceneConfig.name;
      cache.get(graphicsObjId, function(_graphics) {
        graphics = _graphics;
      }, function() {
        factory.phaserGame(function(phaserGame) {
          graphics = phaserGame.add.graphics();
          cache.set(graphicsObjId, graphics);
        });
      });

      graphics.inputEnabled = true;
      graphics.lineStyle(2, 0x000000, 1);
      graphics.beginFill(sceneConfig.color, 1);

      if (sceneConfig.shape == "circle") {
        shape = graphics.drawCircle(
          sceneConfig.xPosition,
          sceneConfig.yPosition,
          sceneConfig.radius * 2
        );
        shape.scale.setTo(sceneConfig.xScale, sceneConfig.yScale);
        shape.inputEnabled = true;
        graphics.endFill();

      } else if (sceneConfig.shape == "line") {

        graphics.moveTo(sceneConfig.start.xPosition, sceneConfig.start.yPosition);
        graphics.lineTo(sceneConfig.end.xPosition, sceneConfig.end.yPosition);
      }

      graphics.endFill();

      var state = {
        isSelected: false,
        isFocused: false,
        isMoving: false
      };

      var objId = "shape_" + sceneConfig.name;
      cache.get(shapeBuiltObjId, function(objectIds) {
        objectIds.push(objId);
        cache.set(objId, {
          obj: shape,
          config: sceneConfig,
          state: state
        });
      });

      if (callback) {
        callback(shape);
      }

    };

    this.updateShapes = function() {};

    this.clearShapes = function(sceneConfig) {
      var graphicsObjId = "graphics_" + sceneConfig.name;
      cache.get(graphicsObjId, function(graphics) {
        graphics.clear();
        cache.remove(graphicsObjId);
      });
    };

    this.getShapes = function(callback, cbComplete) {
      getBuiltObjects(function(builtObject) {
        callback(builtObject);
      }, function() {
        if (cbComplete) {
          cbComplete();
        }
      });
    };

    this.getShapeConfigById = function(name, callback) {
      enumerate(spriteBuilderConfig, this, function(config) {
        if (name == config.name) {
          callback(config);
        }
      });
    };

    this.reset = function() {};
  }, function error(err) {})
});factory(function(factory) {
  factory.register(true, true, function scoreboardScene(playerScoreProvider, sceneObjBuilder, sceneEventManager, sceneManager, sceneSelector, phaserGame) {



    this.create = function() {
      sceneEventManager.subscribeToAnimationComplete(function(animation, sceneConfig) {
        if (sceneConfig.name.indexOf("playButton") >= 0) {
          sceneSelector.next();
          phaserGame.reset();
        }
      });
      sceneEventManager.subscribeToSpriteSelected(function(mouse, obj, sceneConfig, state) {
        sceneManager.playAnimationsForSceneObj(sceneConfig, [sceneConfig.name + "Anim"]);
      });
      sceneEventManager.subscribeToMouseMove(function(mouse, isMoveLeft, isMoveRight, isMoveUp, isMoveDown) {
        sceneObjBuilder.getImages(function(image, config, state) {
          if (config.name.indexOf("cursor") >= 0) {
            image.x = mouse.x;
            image.y = mouse.y;
          }
        });
      });
      sceneObjBuilder.isComplete(function() {
        playerScoreProvider.getPlayers(function(playerScore) {
          var exit = false;
          sceneObjBuilder.getText(function(scoreText, sceneConfig) {
            if (exit == false) {
              exit = true;
              if (sceneConfig.name.indexOf("playerScoreText") >= 0 && sceneConfig.text == "Blank") {
                var text = playerScore.name + "\xa0\xa0\xa0\xa0" + playerScore.value;
                sceneConfig.text = text;
                scoreText.text = text;
              }
            }
          });
        });
      });
    };

    this.reset = function() {};
  }, function error(err) {})
});factory(function(factory) {
  factory.register(true, true, function sceneSelector(sceneSelectorConfig, cache) {



    sceneSelectorConfig.sort(function(i1, i2) { //always enumerate from the bottom of the list so the highest priority needs to be at the bottom.
      return i2.priority - i1.priority;
    });

    this.next = function() {
      enumerate(sceneSelectorConfig, this, function(sceneConfig, cbCondition, cbRemove, cbBreak) {
        if (sceneConfig.name.endsWith("designerScene") == false) {
          if (sceneConfig.repeat) {
            getLastSceneHistory(function(_lastSelectedScene) {
              if (_lastSelectedScene.name != sceneConfig.name) {
                selectScene(sceneConfig.name);
                cbBreak();
              }
            });
          } else {
            isInSceneHistory(sceneConfig.name, function found() {

            }, function notFound() {
              selectScene(sceneConfig.name);
              cbBreak();
            });
          }
        }
      });
    };

    this.select = function(sceneName, cbSelectedScene) {
      selectScene(sceneName, cbSelectedScene);
    };

    this.getSelectedScene = function(cbFound, cbNotFound) { //first one on the history stack is the selected scene
      getLastSceneHistory(cbFound, cbNotFound);
    };

    this.reset = function() {
      cache.reset();
    };

    function isInSceneHistory(sceneName, cbFound, cbNotFound) {
      cache.get("sceneHistory", function(_history) {
        if (_history.indexOf(sceneName) >= 0) {
          cbFound();
        } else {
          cbNotFound();
        }
      }, function() {
        cache.set("sceneHistory", [], null, true); //never remove this cache item
        cbNotFound();
      });
    };

    function selectScene(sceneName, cbSelectedScene) {
      getSceneConfig(sceneName, function(sceneConfig) {
        if (cbSelectedScene) {
          cbSelectedScene(sceneConfig);
        }
        pushSceneHistory(sceneConfig);
      });
    };

    function pushSceneHistory(sceneConfig) {
      var history = [];
      cache.get("sceneHistory", function(_history) {
        history = _history;
      }, function() {
        cache.set("sceneHistory", history, null, true); //never remove this cache item
      });
      //top of the stack is the last selected scene.
      history.push(sceneConfig.name);
    };

    function getLastSceneHistory(cbFound, cbNotFound) {
      cache.get("sceneHistory", function(_history) {
        var lastSceneHist;
        //top of the stack is the last selected scene.
        enumerate(_history, this, function(sceneName, cbCondition, cbRemove, cbBreak) {
          lastSceneHist = sceneName;
          cbBreak();
        }, function() {
          getSceneConfig(lastSceneHist, cbFound, cbNotFound);
        });
      }, function() {
        cache.set("sceneHistory", [], null, true); //never remove this cache item
        if (cbNotFound) {
          cbNotFound();
        }
      });
    };

    function getSceneConfig(sceneName, cbFound, cbNotFound) {
      enumerate(sceneSelectorConfig, this, function(sceneConfig, cbCondition, cbRemove, cbBreak) {
        if (sceneConfig.name == sceneName) {
          cbFound(sceneConfig);
          cbBreak();
        }
      }, cbNotFound);
    };
  }, function error(err) {})
});factory(function(factory) {
  factory.register(true, true, function sceneObjBuilder(spriteBuilder, animationBuilder, textBuilder, imageBuilder, shapeBuilder, cache) {



    var buildConfigCacheId = "buildConfigCacheId";
    this.initialise = function(sceneConfigurations) {
      sceneConfigurations.sort(function(i1, i2) {
        return i1.priority - i2.priority;
      });
      var prioritisedBuildConfig = [];
      var priority = 0;
      enumerate(sceneConfigurations, this, function(sceneConfig, cbCondition, cbRemove) {
        if (sceneConfig.enabled) {
          if (sceneConfig.type == "sprite") {
            priority++;
            prioritisedBuildConfig.push({
              priority: priority,
              loadFunc: spriteBuilder.loadSprite,
              createFunc: spriteBuilder.createSprite,
              config: sceneConfig
            });
          }
          if (sceneConfig.type == "animation") {
            priority++;
            prioritisedBuildConfig.push({
              priority: priority,
              loadFunc: animationBuilder.loadAnimation,
              createFunc: animationBuilder.createAnimation,
              config: sceneConfig
            });
          }
          if (sceneConfig.type == "image") {
            priority++;
            prioritisedBuildConfig.push({
              priority: priority,
              loadFunc: imageBuilder.loadImage,
              createFunc: imageBuilder.createImage,
              config: sceneConfig
            });
          }
          if (sceneConfig.type == "text") {
            priority++;
            prioritisedBuildConfig.push({
              priority: priority,
              loadFunc: textBuilder.loadText,
              createFunc: textBuilder.createText,
              config: sceneConfig
            });
          }
          if (sceneConfig.type == "shape") {
            priority++;
            prioritisedBuildConfig.push({
              priority: priority,
              loadFunc: shapeBuilder.loadShape,
              createFunc: shapeBuilder.createShape,
              config: sceneConfig
            });
          }
          if (sceneConfig.type == "sprite | animation") {
            priority++;
            prioritisedBuildConfig.push({
              priority: priority,
              loadFunc: animationBuilder.loadAnimation,
              createFunc: function() {},
              config: sceneConfig
            });
            priority++;
            prioritisedBuildConfig.push({
              priority: priority,
              loadFunc: spriteBuilder.loadSprite,
              createFunc: spriteBuilder.createSprite,
              config: sceneConfig
            });
            priority++;
            prioritisedBuildConfig.push({
              priority: priority,
              loadFunc: function() {},
              createFunc: animationBuilder.createAnimation,
              config: sceneConfig
            });
          }
          if (sceneConfig.type == "sprite | image") {
            priority++;
            prioritisedBuildConfig.push({
              priority: priority,
              loadFunc: imageBuilder.loadImage,
              createFunc: function() {},
              config: sceneConfig
            });
            priority++;
            prioritisedBuildConfig.push({
              priority: priority,
              loadFunc: spriteBuilder.loadSprite,
              createFunc: spriteBuilder.createSprite,
              config: sceneConfig
            });
          }
        }
      }, function() {
        prioritisedBuildConfig.sort(function(i1, i2) {
          return i1.priority - i2.priority;
        });
        prioritisedBuildConfig.reverse();

        //make sure that the config of the same type are prioritised amongst each other
        var filteredSceneConfigurations = [];
        enumerate(prioritisedBuildConfig, this, function(builderConfig, cbCondition, cbRemove) {
          var exists = false;
          enumerate(filteredSceneConfigurations, this, function(builderConfig2, cbCondition2, cbRemove2) {
            if (builderConfig.config.name == builderConfig2.name) {
              exists = true;
            }
          }, function() {
            if (!exists) {
              filteredSceneConfigurations.push(builderConfig.config);
            }
          });
        }, function() {
          cache.set("buildConfigCacheId", prioritisedBuildConfig);
          spriteBuilder.initialise(filteredSceneConfigurations);
          animationBuilder.initialise(filteredSceneConfigurations);
          textBuilder.initialise(filteredSceneConfigurations);
          imageBuilder.initialise(filteredSceneConfigurations);
          shapeBuilder.initialise(filteredSceneConfigurations);
        });
      });
    };

    this.loadObjects = function(cbComplete) {
      cache.get(buildConfigCacheId, function(allBuildConfig) {
        enumerate(allBuildConfig, this, function(buildConfig) {
          buildConfig.loadFunc(buildConfig.config, function loaded() {

          });
        }, cbComplete);
      });
    };

    this.createObjects = function(cbComplete) {
      cache.get(buildConfigCacheId, function(allBuildConfig) {
        enumerate(allBuildConfig, this, function(buildConfig) {
          buildConfig.createFunc(buildConfig.config, function created() {});
        }, cbComplete);
      });
      cache.set("objectsCreated", {});
    };

    this.getAnimations = function(callback, cbComplete) {
      animationBuilder.getAnimations(function(scene) {
        callback(scene);
      });
    };

    this.getSprites = function(cbFound) {
      spriteBuilder.getSprites(function(scene) {
        cbFound(scene.obj,
          scene.config,
          scene.state);
      });
    };

    this.getText = function(cbFound) {
      textBuilder.getText(function(scene) {
        cbFound(scene.obj,
          scene.config,
          scene.state);
      });
    };

    this.getShapes = function(cbFound) {
      shapeBuilder.getShapes(function(scene) {
        cbFound(scene.obj,
          scene.config,
          scene.state);
      });
    };

    this.getImages = function(cbFound) {
      imageBuilder.getImages(function(scene) {
        cbFound(scene.obj,
          scene.config,
          scene.state);
      });
    };

    this.isComplete = function(cbDone) {
      var check = setInterval(function() {
        cache.get("objectsCreated", function() {
          cbDone();
          clearInterval(check);
        });
      }, 20);
    };

    this.reset = function() {
      spriteBuilder.reset();
      animationBuilder.reset();
      textBuilder.reset();
      imageBuilder.reset();
      shapeBuilder.reset();
      cache.reset();
    };

  }, function error(err) {})
});factory(function(factory) {
  factory.register(true, true, function sceneManager(sceneObjBuilder) {



    function clone(sceneConfig, _sceneConfigItem, cloneCount, isXPos) {
      if (isXPos == undefined || isXPos == null) {
        var prevXVal;
        var prevYVal;
        for (var i = cloneCount - 1; i > 0; i--) {
          var clonedSceneConfigItem = JSON.parse(JSON.stringify(_sceneConfigItem));
          clonedSceneConfigItem.name += i;
          if (prevXVal || prevYVal) {
            clonedSceneConfigItem.xPosition = prevXVal + _sceneConfigItem.width;
            clonedSceneConfigItem.yPosition = prevYVal + _sceneConfigItem.height;
          } else {
            clonedSceneConfigItem.xPosition += _sceneConfigItem.width;
            clonedSceneConfigItem.yPosition += _sceneConfigItem.height;
          }
          prevXVal = clonedSceneConfigItem.xPosition;
          prevYVal = clonedSceneConfigItem.yPosition;
          sceneConfig.push(clonedSceneConfigItem);
        };
      } else {
        var prevVal;
        for (var i = cloneCount - 1; i > 0; i--) {
          var clonedSceneConfigItem = JSON.parse(JSON.stringify(_sceneConfigItem));
          clonedSceneConfigItem.name += i;
          if (isXPos == false) {
            if (prevVal) {
              clonedSceneConfigItem.yPosition = prevVal + _sceneConfigItem.height;
            } else {
              clonedSceneConfigItem.yPosition += _sceneConfigItem.height;
            }
            prevVal = clonedSceneConfigItem.yPosition;
            sceneConfig.push(clonedSceneConfigItem);
          } else if (isXPos == true) {
            if (prevVal) {
              clonedSceneConfigItem.xPosition = prevVal + _sceneConfigItem.width;
            } else {
              clonedSceneConfigItem.xPosition += _sceneConfigItem.width;
            }
            prevVal = clonedSceneConfigItem.xPosition;
            sceneConfig.push(clonedSceneConfigItem);
          }
        };
      }
    };

    this.initialise = function(sceneName) {
      factory[sceneName + "Config"](function(sceneConfig) {
        console.log("");
        console.log("initialising the " + sceneName + " scene.");
        enumerate(sceneConfig, this, function(_sceneConfigItem) {
          var cloneOnXPos = (_sceneConfigItem.cloneX !== null && _sceneConfigItem.cloneX !== undefined);
          var cloneOnYPos = (_sceneConfigItem.cloneY !== null && _sceneConfigItem.cloneY !== undefined);
          var cloneOnXYPos = (_sceneConfigItem.cloneXY !== null && _sceneConfigItem.cloneXY !== undefined);
          if (cloneOnXPos == true) {
            clone(sceneConfig, _sceneConfigItem, _sceneConfigItem.cloneX, true);
          } else if (cloneOnYPos == true) {
            clone(sceneConfig, _sceneConfigItem, _sceneConfigItem.cloneY, false);
          } else if (cloneOnXYPos == true) {
            clone(sceneConfig, _sceneConfigItem, _sceneConfigItem.cloneXY, null);
          }
        });
        sceneObjBuilder.initialise(sceneConfig);
      });
    };

    this.loadScene = function() {
      sceneObjBuilder.loadObjects();
    };

    this.createScene = function(sceneName) {
      sceneObjBuilder.createObjects(function() {
        factory[sceneName](function(scene) {
          console.log("");
          console.log("creating the " + sceneName + " scene.");
          scene.create();
          sceneObjBuilder.getAnimations(function(scene) {
            if (scene.start) {
              console.log("auto starting animation");
              playAnimationForSceneObj(scene.obj,
                scene.config,
                scene.state);
            }
          });
        });
      });
    };

    this.getSelectedSceneObj = function(cbFound) {
      sceneObjBuilder.getSprites(function(obj, config, state) {
        if (state.isSelected == true) {
          cbFound(obj, config, state);
        }
      });
      sceneObjBuilder.getText(function(obj, config, state) {
        if (state.isSelected == true) {
          cbFound(obj, config, state);
        }
      });
      sceneObjBuilder.getShapes(function(obj, config, state) {
        if (state.isSelected == true) {
          cbFound(obj, config, state);
        }
      });
    };

    this.getDraggedSceneObj = function(cbFound) {
      sceneObjBuilder.getSprites(function(obj, config, state) {
        if (state.isDragged == true) {
          cbFound(obj, config, state);
        }
      });
      sceneObjBuilder.getText(function(obj, config, state) {
        if (state.isDragged == true) {
          cbFound(obj, config, state);
        }
      });
      sceneObjBuilder.getShapes(function(obj, config, state) {
        if (state.isDragged == true) {
          cbFound(obj, config, state);
        }
      });
    };

    this.playAnimationsForSceneObj = function(sceneObj, animNameFilters) {
      sceneObjBuilder.getAnimations(function(scene) {
        enumerate(sceneObj.animations, this, function item(indexConfig) {
          if (scene.config.name == indexConfig.name) {
            var passedFilters = true;
            enumerate(animNameFilters, this, function(_filter) {
              if (indexConfig.name.indexOf(_filter) == -1) {
                passedFilters = false;
              }
            }, function() {
              if (passedFilters) {
                playAnimationForSceneObj(scene.obj,
                  scene.config,
                  scene.state);
              }
            });
          }
        });
      });
    };

    this.reset = function() {
      sceneUserInputEvents.reset();
      sceneObjBuilder.reset();
      cache.reset();
    };

    function playAnimationForSceneObj(animation, config, state) {
      var timeOffset = Math.floor((Math.random() * 600) + 50);
      setTimeout(function() {
        try {
          console.log("playing animation for ", config.name);
          animation.play();
        } catch (err) {
          console.log("ANIMATION ERROR: " + "(" + config.name + ")", err);
        }
      }, timeOffset);
    };
  }, function error(err) {})
});factory(function(factory) {
  factory.register(true, true, function sceneEventManager(phaserGame, sceneObjBuilder, sceneManager) {



    this.initialise = function() {
      phaserGame.input.keyboard.start();
    };

    this.subscribeToDeleteKeyPress = function(cbEvent) {
      phaserGame.input.keyboard.onDownCallback = function(keyCodeData) {
        if (keyCodeData.keyCode == 46) { //DeleteKeyCode
          cbEvent();
        }
      };
    };

    this.subscribeToKeyPress = function(cbEvent) {
      phaserGame.input.keyboard.onDownCallback = function(keyCodeData) {
        cbEvent(keyCodeData.keyCode);
      };
    };

    this.subscribeToAnimationComplete = function(cbEvent) {
      sceneObjBuilder.getAnimations(function(scene) {
        scene.obj.onComplete.add(function() {
          cbEvent(scene.obj, scene.config);
        }, this);
      });
    };

    this.subscribeToMouseDown = function(cbEvent) {
      phaserGame.input.onDown.add(function(mouse) {
        setTimeout(function() {
          cbEvent(mouse);
        }, 280);
      });
    };

    this.subscribeToMouseMove = function(cbEvent) {
      cache.set("prevMousePos", {
        x: phaserGame.world.centerX,
        y: phaserGame.world.centerY
      });
      phaserGame.input.useHandCursor = true;
      phaserGame.input.addMoveCallback(function(mouse) {
        cache.get("prevMousePos", function(_prevMousePos) {
          var isMoveLeft;
          var isMoveRight;
          var isMoveUp;
          var isMoveDown;
          if (mouse.x >= _prevMousePos.x) {
            isMoveLeft = false;
            isMoveRight = true;
          } else {
            isMoveLeft = true;
            isMoveRight = false;
          }
          if (mouse.y >= _prevMousePos.y) {
            isMoveUp = false;
            isMoveDown = true;
          } else {
            isMoveUp = true;
            isMoveDown = false;
          }
          cache.set("prevMousePos", {
            x: mouse.x,
            y: mouse.y
          });
          cbEvent.call(this, mouse, isMoveLeft, isMoveRight, isMoveUp, isMoveDown);
        });
      }, this);
    };

    this.subscribeToSceneCreated = function(cbEvent) {
      cache.get("sceneCreated", function(_cbEvent) {
        _cbEvent();
      }, function() {
        cache.set("sceneCreated", cbEvent);
      });
    };

    this.subscribeToSpriteSelected = function(cbEvent) {
      sceneObjBuilder.getSprites(function(obj, sceneConfig, state) {
        obj.events.onInputDown.add(function() {
          state.isSelected = true;
          console.log("SELECTED OBJECT: ", sceneConfig);
          setTimeout(function() {
            sceneManager.getSelectedSceneObj(function(obj2, sceneConfig2, state2) {
              if (sceneConfig.name != sceneConfig2.name) {
                cache.get("deselectedSprite", function(cbEvent) {
                  cbEvent(obj2, sceneConfig2, state2);
                });
                console.log("DESELECTED OBJECT: ", sceneConfig2);
                state2.isSelected = false;
              }
            });

          }, 200);
          cbEvent(phaserGame.input.mousePointer, obj, sceneConfig, state);
        }, this);
      });
    };

    this.subscribeToSpriteDeselected = function(cbEvent) {
      cache.set("deselectedSprite", cbEvent);
    };

    this.subscribeToSpriteDragStart = function(cbEvent) {
      sceneObjBuilder.getSprites(function(obj, sceneConfig, state) {
        obj.events.onDragStart.add(function() {

          var stateId = sceneConfig.name + "_state";
          cache.get(stateId, function(_state) {
            _state.prevX = phaserGame.input.mousePointer.x;
            _state.prevY = phaserGame.input.mousePointer.y;
          }, function() {
            cache.set(stateId, {
              prevX: phaserGame.input.mousePointer.x,
              prevY: phaserGame.input.mousePointer.y
            }, null, true);
          });

          setTimeout(function() {
            cache.get(stateId, function(_state) {
              var prevX = _state.prevX;
              var prevY = _state.prevY;
              var curX = phaserGame.input.mousePointer.x;
              var curY = phaserGame.input.mousePointer.y;
              isTrueMove(prevX, prevY, curX, curY, function() {
                state.isDragged = true;
                cbEvent(phaserGame.input.mousePointer, obj, sceneConfig, state);
              });
            });
          }, 250);

        }, this);
      });
    };

    this.subscribeToSpriteDragStop = function(cbEvent) {
      sceneObjBuilder.getSprites(function(obj, sceneConfig, state) {
        obj.events.onDragStop.add(function() {
          state.isDragged = false;
          cbEvent(phaserGame.input.mousePointer, obj, sceneConfig, state);
        }, this);
      });
    };

    this.subscribeToSceneObjCollision = function(cbEvent) {
      cache.set("overlapCallback", cbEvent);
    };

    this.update = function() {
      sceneObjBuilder.getSprites(function(obj, sceneConfig, state) {
        sceneObjBuilder.getSprites(function(obj2, sceneConfig2, state2) {
          if (sceneConfig.name != sceneConfig2.name && obj.overlap(obj2)) {
            cache.get("overlapCallback", function(overlapCallback) {
              overlapCallback(obj, sceneConfig, obj2, sceneConfig2);
            });
          }
        });
      });
    };

    this.reset = function() {
      phaserGame.input.deleteMoveCallback(mouseMoveEvent, this);
      phaserGame.input.keyboard.stop();
    };

    function isTrueMove(prevX, prevY, curX, curY, cbIsMove) {
      var xDiff = Math.abs(curX - prevX);
      var yDiff = Math.abs(curY - prevY);
      if (xDiff >= 15 || yDiff >= 15 && phaserGame.input.mousePointer.isDown == true) {
        cbIsMove();
      }
    };
  }, function error(err) {})
});factory(function(factory) {
  factory.register(true, true, function preloaderScene(sceneObjBuilder, sceneSelector, sceneEventManager, sceneManager, phaserGame) {



    this.create = function() {

      sceneEventManager.subscribeToMouseMove(function(mouse, isMoveLeft, isMoveRight, isMoveUp, isMoveDown) {
        sceneObjBuilder.getImages(function(image, config, state) {
          if (config.name.indexOf("cursor") >= 0) {
            image.x = mouse.x;
            image.y = mouse.y;
          }
        });
      });
      sceneEventManager.subscribeToAnimationComplete(function() {
        sceneSelector.next();
        phaserGame.reset();
      });

      sceneObjBuilder.isComplete(function() {
        sceneObjBuilder.getSprites(function(obj, sceneConfig) {
          sceneManager.playAnimationsForSceneObj(sceneConfig, ["play"])
        });
      });
    };
    this.reset = function() {};

  }, function error(err) {})
});factory(function(factory) {
  factory.register(true, true, function playerScoreProvider() {



    function Score(name, value) {
      this.name = name;
      this.value = value;
    };

    function create() {
      players = [
        new Score("Fachtna Hrolf", 10),
        new Score("Senán Fabio", 14),
        new Score("Bartolomeo Zopyros", 106),
        new Score("Jadran Nevan", 104),
        new Score("Bjartr Shikoba", 50),
      ];
      return players;
    };

    function sortPlayers(count) {
      if (count > 0) {
        players.sort(function(p1, p2) {
          return p1.value - p2.value;
        });
        count--;
        sortPlayers(count);
      }
    };
    this.getPlayers = function(cbFound) {
      var players = create();
      cache.set("playerScoreIndex", players.length);
      enumerate(players, this, function(player, cbCon, cbRemove, cbBreak) {
        cache.get("playerScoreIndex", function(_index) {
          if (_index > 0) {
            _index--;
            cache.set("playerScoreIndex", _index);
            cbFound(player);
            cbBreak();
            cbRemove();
          }
        });
      });
    };

    this.reset = function() {
      create();
    };

  }, function error(err) {})
});factory(function(factory) {
  factory.register(true, true, function phaserGame(phaserGameConfig, sceneManager, sceneSelector, cache) {



    function createGame() {
      return new Phaser.Game(
        phaserGameConfig.width,
        phaserGameConfig.height,
        Phaser.CANVAS,
        phaserGameConfig.title, {
          preload: function() {

            this.inputEnabled = true;
            this.input.enabled = true;
            thisInstance.add = this.add;
            thisInstance.load = this.load;
            thisInstance.state = this.state;
            thisInstance.world = this.world;
            thisInstance.stage = this.stage;
            thisInstance.input = this.input;
            thisInstance.debug = this.debug;
            thisInstance.camera = this.camera;
            thisInstance.physics = this.physics;
            thisInstance.context = this.context;
            thisInstance.math = this.math;
            //game.world.setBounds(0, 2000,  4000,  4000);
            this.physics.startSystem(Phaser.Physics.ARCADE);

            cache.get("start", function() {
              sceneSelector.getSelectedScene(function(_scene) {
                sceneManager.initialise(_scene.name);
                factory.sceneEventManager(function(_instance) {
                  _instance.initialise();
                });
                sceneManager.loadScene();
              });
            });
          },
          create: function() {
            cache.get("start", function() {
              sceneSelector.getSelectedScene(function(_scene) {
                sceneManager.createScene(_scene.name);
              });
            });
          },
          update: function() {
            factory.sceneEventManager(function(_instance) {
              _instance.update();
            });
          }
        }
      );
    };

    var game;
    var thisInstance = this;

    this.start = function(sceneName, cbStarted, isFullScreen) {
      game = createGame();
      sceneSelector.getSelectedScene(function found() {}, function notFound() {
        if (sceneName) {
          sceneSelector.select(sceneName);
        } else {
          console.log("WARNING: ", "Could not select a scene");
        }
      });
      setTimeout(function() {

        game.stage.backgroundColor = '#f6f6f6';
        game.scale.fullScreenScaleMode = Phaser.ScaleManager.SHOW_ALL;
        game.scale.sourceAspectRatio = 16;
        if (isFullScreen) {
          game.scale.startFullScreen();
        } else {
          game.scale.fullScreenScaleMode = Phaser.ScaleManager.EXACT_FIT;
        }
        game.scale.setShowAll();
        game.scale.refresh();
        cache.set("start", {});
        game.state.restart(true, true);
        if (cbStarted) {
          cbStarted();
        }
      }, 1000);
    };

    this.exit = function() {
      sceneSelector.reset();
      cache.reset();
      game.destroy();
      game = null
    };

    this.reset = function(cbStarted) {
      sceneSelector.reset();
      cache.reset();
      cache.set("start", {});
      game.state.restart(true, true);
      if (cbStarted) {
        cbStarted();
      }
    };
  }, function error(err) {})
});factory(function(factory) {
  factory.register(true, true, function imageBuilder(imageBuilderConfig, cache) {



    var builtObjIdsCacheId = "imageBuiltObjIds";

    function getBuiltObjects(callback, cbComplete) {
      cache.get(builtObjIdsCacheId, function(builtObjIds) {
        enumerate(builtObjIds, this, function(builtObjId) {
          cache.get(builtObjId, function(builtObj) {
            callback(builtObj);
          });
        }, cbComplete);
      });
    };

    function mergeConfigurations(sceneConfiguration, gameObjectConfig) {
      var origName = sceneConfiguration.name;
      var gameObjectConfigClone = JSON.parse(JSON.stringify(gameObjectConfig));
      for (var prop in gameObjectConfigClone) {
        sceneConfiguration[prop] = gameObjectConfigClone[prop];
      };
      sceneConfiguration.name = origName;
    };

    this.initialise = function(sceneConfigurations) {
      cache.set(builtObjIdsCacheId, []);
      enumerate(sceneConfigurations, this, function(sceneConfiguration) {
        enumerate(imageBuilderConfig, this, function(imageConfig) {
          var imgId = sceneConfiguration.name.replace(/[0-9]/g, '');
          if (imageConfig.name == imgId) {
            var configId = "config_" + sceneConfiguration.name;
            cache.get(configId, function() {}, function() {
              cache.set(configId, sceneConfiguration);
            });
            mergeConfigurations(sceneConfiguration, imageConfig);
          }
        });
      });
    };

    this.loadImage = function(sceneConfig, callback) {
      console.log("-------------------LOADING IMAGE (" + sceneConfig.name + ")---------------------");
      factory.phaserGame(function(phaserGame) {
        phaserGame.load.image(sceneConfig.name, sceneConfig.file);
        callback();
      });
    };

    this.createImage = function(sceneConfig, callback) {
      console.log("-------------------CREATING IMAGE (" + sceneConfig.name + ")---------------------");
      factory.phaserGame(function(phaserGame) {
        var image = phaserGame.add.image(
          sceneConfig.xPosition,
          sceneConfig.yPosition,
          sceneConfig.name
        );
        if (sceneConfig.anchor == true) {
          image.anchor.setTo(0.5, 0.5);
        }
        image.height = sceneConfig.height;
        image.width = sceneConfig.width;

        var objId = "img_" + sceneConfig.name;
        cache.get(builtObjIdsCacheId, function(objectIds) {
          objectIds.push(objId);
          cache.set(objId, {
            obj: image,
            config: sceneConfig,
            state: {
              isSelected: false
            }
          });
        });
        callback();
      });
    };

    this.getImages = function(callback, cbComplete) {
      getBuiltObjects(function(builtObject) {
        callback(builtObject);
      }, function() {
        if (cbComplete) {
          cbComplete();
        }
      });
    };

    this.getImageConfigById = function(name, callback) {
      enumerate(imageBuilderConfig, this, function(config) {
        if (name == config.name) {
          callback(config);
        }
      });
    };

    this.reset = function() {};
  }, function error(err) {})
});factory(function(factory) {
  factory.register(true, true, function flyScene(sceneManager, sceneEventManager, sceneObjBuilder, sceneSelector) {



    this.create = function() {
      sceneEventManager.subscribeToMouseMove(function(mouse, isMoveLeft, isMoveRight, isMoveUp, isMoveDown) {
        sceneObjBuilder.getImages(function(image, config, state) {
          if (config.name.indexOf("cursor") >= 0) {
            image.x = mouse.x;
            image.y = mouse.y;
          }
        });
      });
      sceneObjBuilder.isComplete(function() {
        sceneObjBuilder.getSprites(function(sprite, config, state) {
          sceneManager.playAnimationsForSceneObj(config, [config.name + "Alive"]);
        });
      });
      sceneEventManager.subscribeToSpriteSelected(function(mouse, obj, sceneConfig, state) {
        if (sceneConfig.name.indexOf("fly") >= 0) {
          sceneManager.playAnimationsForSceneObj(sceneConfig, [sceneConfig.name + "Dead"]);
        }
      });
      sceneEventManager.subscribeToAnimationComplete(function(animation, animConfig) {
        sceneObjBuilder.getSprites(function(sprite, config, state) {
          enumerate(config.animations, this, function(animConfig2) {
            if (animConfig.name == animConfig2.name) {
              sprite.kill();
            }
          });
        });
      });
    };

    this.reset = function() {

    };

  }, function error(err) {})
});factory(function(factory) {
  factory.register(true, true, function capturePlayerScene(sceneManager, sceneObjBuilder, sceneSelector, sceneEventManager, phaserGame) {



    this.create = function() {

      sceneEventManager.subscribeToMouseMove(function(mouse, isMoveLeft, isMoveRight, isMoveUp, isMoveDown) {
        sceneObjBuilder.getImages(function(image, config, state) {
          if (config.name.indexOf("cursor") >= 0) {
            image.x = mouse.x;
            image.y = mouse.y;
          }
        });
      });

      sceneEventManager.subscribeToAnimationComplete(function(animation, sceneConfig) {
        if (sceneConfig.name.indexOf("submit") >= 0) {
          sceneSelector.next();
          phaserGame.reset();
        }
      });

      sceneEventManager.subscribeToSpriteSelected(function(mouse, obj, sceneConfig, state) {
        if (sceneConfig.name.indexOf("playerCapture") >= 0) {
          sceneObjBuilder.getText(function(text, _sceneConfig, _state) {
            text.text = "";
          });
        } else {
          sceneManager.playAnimationsForSceneObj(sceneConfig, [sceneConfig.name + "Anim"]);
        }
      });

      sceneEventManager.subscribeToKeyPress(function(keyCode) {
        sceneObjBuilder.getText(function(inputText, _sceneConfig, _state) {
          if (inputText.text.length < 14) {
            switch (keyCode) {
              case 8:
                var text = inputText.text.replaceAt(inputText.text.length - 1, " ");
                text = text.replace(" ", "");
                inputText.text = text;
                break;
              case 13:
                break;
              default:
                isKeyAlphaNumeric(keyCode, function() {
                  var char = String.fromCharCode(keyCode).toString();
                  inputText.text += char;
                });
                break;
            };
          } else {
            switch (keyCode) {
              case 8:
                var text = inputText.text.replaceAt(inputText.text.length - 1, " ");
                text = text.replace(" ", "");
                inputText.text = text;
                break;
            };
          }
        });
      });
    };

    this.reset = function() {};
  }, function error(err) {})
});factory(function(factory) {
  factory.register(true, true, function animationBuilder(animationBuilderConfig, cache) {



    var builtObjIdsCacheId = "animationBuiltObjIds";

    function getBuiltObjects(callback, cbComplete) {
      cache.get(builtObjIdsCacheId, function(builtObjIds) {
        enumerate(builtObjIds, this, function(builtObjId) {
          cache.get(builtObjId, function(builtObj) {
            callback(builtObj);
          });
        }, cbComplete);
      });
    };

    function mergeConfigurations(sceneConfiguration, gameObjectConfig) {
      var origName = sceneConfiguration.name;
      var gameObjectConfigClone = JSON.parse(JSON.stringify(gameObjectConfig));
      for (var prop in gameObjectConfigClone) {
        sceneConfiguration[prop] = gameObjectConfigClone[prop];
      };
      gameObjectConfigClone.name = origName;
      sceneConfiguration.name = origName;
    };

    this.initialise = function(sceneConfigurations, sceneIndex) {
      cache.set(builtObjIdsCacheId, []);
      enumerate(sceneConfigurations, this, function(sceneConfiguration) {
        var animId = sceneConfiguration.name.replace(/[0-9]/g, '');
        enumerate(animationBuilderConfig, this, function(animationConfig) {
          if (animationConfig.name == animId) {
            var configId = "config_" + sceneConfiguration.name;
            cache.get(configId, function() {}, function() {
              cache.set(configId, sceneConfiguration);
            });
            mergeConfigurations(sceneConfiguration, animationConfig);
            enumerate(sceneConfiguration.animations, this, function(animConfig) {
              animConfig.name = animConfig.name.replace(animId, sceneConfiguration.name);
            });
          }
        });
      });
    };

    this.loadAnimation = function(sceneConfig, callback) {
      console.log("-------------------LOADING ANIMATION (" + sceneConfig.name + ")---------------------");
      factory.phaserGame(function(phaserGame) {
        phaserGame.load.spritesheet(
          sceneConfig.name,
          sceneConfig.file,
          sceneConfig.frameWidth,
          sceneConfig.frameHeight
        );
        callback();
      });
    };

    this.createAnimation = function(sceneConfig, callback) {
      console.log("-------------------CREATING ANIMATION (" + sceneConfig.name + ")---------------------");
      enumerate(sceneConfig.animations, this, function(indexConfig) {

        var animations = [];
        if (indexConfig.startIndex < indexConfig.endIndex) {
          for (var index = indexConfig.startIndex; index <= indexConfig.endIndex; index++) {
            animations.push(index);
          };
        } else {
          for (var index = indexConfig.startIndex; index >= indexConfig.endIndex; index--) {
            animations.push(index);
          };
        }

        var startAnimation = false;
        if (indexConfig.name == sceneConfig.animationStartName) {
          startAnimation = true;
        }

        var objId = "sprite_" + sceneConfig.name;
        cache.get(objId, function(item) {
          var animation = item.obj.animations.add(sceneConfig.name,
            animations,
            indexConfig.speed,
            indexConfig.repeat,
            true);

          objId = "anim_" + indexConfig.name;
          cache.get(builtObjIdsCacheId, function(objectIds) {
            cache.set(objId, {
              obj: animation,
              config: indexConfig,
              state: {
                isSelected: false
              },
              start: startAnimation
            }, function() {
              objectIds.push(objId);
            });
          });
        });

      }, callback);
    };

    this.getAnimations = function(callback, cbComplete) {
      getBuiltObjects(function(builtObject) {
        callback(builtObject);
      }, function() {
        if (cbComplete) {
          cbComplete();
        }
      });
    };

    this.getAnimationConfigById = function(name, callback) {
      enumerate(animationBuilderConfig, this, function(config) {
        if (name == config.name) {
          callback(config);
        }
      });
    };

    this.reset = function() {};
  }, function error(err) {})
});factory(function(factory) {
  factory.register(true, true, function designerScene(sceneManager, sceneEventManager, sceneObjBuilder, spriteBuilderConfig, imageBuilderConfig, animationBuilderConfig, shapeBuilder, designerSceneConfig, phaserGame, cache, sceneSelector) {



    this.create = function() {

      var linksAndNodes;
      factory.phaserGame(function(_instance) {
        linksAndNodes = _instance.add.group();
        sceneObjBuilder.getSprites(function(obj, config) {
          if (config.name.startsWith("Node")) {
            linksAndNodes.add(obj);
          } else if (config.name.startsWith("Link")) {
            linksAndNodes.add(obj);
            drawLink(config.name, phaserGame.input.mousePointer);
          }
          if (config.name == "contextLoader") {
            obj.visible = false;
          }
        });
      });

      cache.set("pan", {});
      sceneEventManager.subscribeToMouseMove(function(mouse, isMoveLeft, isMoveRight, isMoveUp, isMoveDown) {

        // cache.get("pan", function(){
        // 	if (mouse.isDown){
        // 		if (isMoveLeft){
        // 			linksAndNodes.x-= 5;	
        // 		}
        // 		else if (isMoveRight){
        // 			linksAndNodes.x+= 5;
        // 		}
        // 		if (isMoveUp){
        // 			linksAndNodes.y-= 5;
        // 		}
        // 		else if (isMoveDown){
        // 			linksAndNodes.y+= 5;
        // 		}
        // 	}
        // });

        cache.get("disconnectedLink", function(linkConfig) {
          drawLink(linkConfig.name, mouse);
        });
      });

      sceneEventManager.subscribeToSpriteDragStart(function(mouse, obj, sceneConfig, state) {
        factory.phaserGame(function(_instance) {
          linksAndNodes = _instance.add.group();
          sceneObjBuilder.getSprites(function(obj, config) {
            if (config.name.startsWith("Node") || config.name.startsWith("Link")) {
              linksAndNodes.add(obj);
            }
          });
        });
        cache.remove("pan");
      });

      sceneEventManager.subscribeToSpriteDragStop(function(mouse, obj, sceneConfig, state) {
        cache.get("disconnectedLink", function(_linkConfig) { //Do nothing
        }, function() {
          var xPos = mouse.x;
          var yPos = mouse.y;
          var _sceneConfig = sceneConfig;
          if (_sceneConfig.name.endsWith("NodeTemplate")) {
            _sceneConfig = cloneConfig(xPos, yPos, _sceneConfig);
            phaserGame.reset(function() {
              isNodeOverlapNodes(function() {
                console.log("ERROR: A node already exist at location, removing it.");
                removeCloneConfig(_sceneConfig.name);
                phaserGame.reset();
              });
            });
          } else if (_sceneConfig.name.endsWith("LinkTemplate")) {
            enumerate(designerSceneConfig, this, function(_sceneConfig2) {
              if (_sceneConfig2.name.endsWith("LinkArrowTemplate")) {
                var newConfig = cloneConfig(xPos, yPos, _sceneConfig2);
                phaserGame.reset(function() {
                  isLinkOverlapNode(newConfig.name, function(_stateNode, _stateNodeConfig, _stateNodeLink, _stateNodeLinkConfig) {
                    _stateNodeLinkConfig.startNode = _stateNodeConfig.name;
                    _stateNodeLink.input.disableDrag();
                    cache.set("disconnectedLink", _stateNodeLinkConfig, null, true);
                  });
                });
              }
            });
          } else if (_sceneConfig.name.startsWith("Node")) {
            _sceneConfig.xPosition = mouse.x;
            _sceneConfig.yPosition = mouse.y;
            phaserGame.reset();
          }
          cache.set("pan", {});
        });
      });

      sceneEventManager.subscribeToAnimationComplete(function() {
        sceneObjBuilder.getSprites(function(obj, config, state) {
          if (config.name == "contextLoader") {
            if (!state.isBusy) {
              state.isBusy = true;
              setTimeout(function() {
                obj.visible = false;
                state.isBusy = false;
              }, 1500);
            }
          }
        });
      });

      sceneEventManager.subscribeToSpriteDeselected(function(obj, sceneConfig, state) {
        var filter = getAnimPlayFiltersFromSceneName(sceneConfig.name);
        sceneManager.playAnimationsForSceneObj(sceneConfig, ["Unselected", filter])
      });

      sceneEventManager.subscribeToSpriteSelected(function(mouse, obj, sceneConfig, state) {

        var filter = getAnimPlayFiltersFromSceneName(sceneConfig.name);
        sceneManager.playAnimationsForSceneObj(sceneConfig, ["Selected", filter]);
        if (sceneConfig.name.startsWith("Node")) {
          sceneObjBuilder.getSprites(function(obj2, config2, state2) {
            if (config2.name == "contextLoader" && !state.isDragged) {
              phaserGame.world.bringToTop(obj2);
              setTimeout(function() {
                obj.input.disableDrag();
                obj2.input.disableDrag();
                obj2.visible = true;
                obj2.x = obj.x;
                obj2.y = obj.y;
                sceneManager.playAnimationsForSceneObj(config2, ["load"]);
              }, 600);
            } else {
              obj.input.enableDrag();
            }
          });
        }

        if (sceneConfig.name.startsWith("preview")) {
          sceneSelector.next();
          phaserGame.reset();
        }

        if (sceneConfig.name.startsWith("publish")) {
          var path = "/publish?fileName=letfly.zip";
          httpGet(path, function() {
            window.location.href = "/downloads/letfly.zip";
          });
        }

        cache.get("disconnectedLink", function(_linkConfig) {
          cache.remove("disconnectedLink");
          var linkName = _linkConfig.name;
          isMouseOverlap(mouse, function(_node, _nodeConfig) {
            _linkConfig.endNode = _nodeConfig.name;
            drawLink(_linkConfig.name, mouse);
          }, function() {
            removeCloneConfig(linkName);
          });
          phaserGame.reset();
        });
      });

      sceneEventManager.subscribeToDeleteKeyPress(function() {
        sceneManager.getSelectedSceneObj(function(obj, config, state) {
          getNodeLink(config.name, function(_link, _linkConfig) {
            removeCloneConfig(_linkConfig.name);
          });
          removeCloneConfig(config.name);
          phaserGame.reset();
        });
      });
    };

    this.reset = function() {};

    function removeCloneConfig(sceneConfigName) {
      enumerate(designerSceneConfig, this, function(_config, cbCondition, cbRemove, cbBreak) {
        if (_config.name == sceneConfigName) {
          cbRemove();
        }
      });
    }

    function cloneConfig(x, y, sceneConfig) {
      var templateConfigCloneStr = JSON.stringify(sceneConfig);
      var templateConfigClone = JSON.parse(templateConfigCloneStr);
      var sceneType;

      if (sceneConfig.name.endsWith("NodeTemplate")) {
        sceneType = "Node";
      } else if (sceneConfig.name.endsWith("NodeLinkArrowTemplate")) {
        sceneType = "Link";
      }

      templateConfigClone.name = sceneType + generateGUID();
      templateConfigClone.xPosition = x;
      templateConfigClone.yPosition = y;
      templateConfigClone.enabled = true;
      templateConfigClone.visible = true;

      if (templateConfigClone.type == "sprite | animation") {
        enumerate(templateConfigClone.animations, this, function(animation) {
          var animationName = animation.name + generateGUID();
          if (animation.name == templateConfigClone.animationStartName) {
            templateConfigClone.animationStartName = animationName;
          }
          animation.name = animationName;
        });
        designerSceneConfig.push(templateConfigClone);
      }
      return templateConfigClone;
    };


    function getAnimPlayFiltersFromSceneName(sceneName) {
      if (sceneName.indexOf("initial") >= 0) {
        return "Initial";
      } else if (sceneName.indexOf("final") >= 0) {
        return "Final";
      } else if (sceneName.indexOf("Link") >= 0) {
        return "Link";
      } else if (sceneName.indexOf("state") >= 0) {
        return "State";
      } else if (sceneName.indexOf("launch") >= 0) {
        return "Launch";
      }
    };

    function getNodeLink(sceneConfigName, cbFound) {
      sceneObjBuilder.getSprites(function(obj, config) {
        if (sceneConfigName == config.name && config.name.indexOf("Node") >= 0) {
          sceneObjBuilder.getSprites(function(obj2, config2) {
            if (config2.startNode == config.name) {
              cbFound(obj2, config2, obj, config, true);
            } else if (config2.endNode == config.name) {
              cbFound(obj2, config2, obj, config, true);
            }
          });
        }
      });
    };

    function getLinkNodes(sceneConfigName, cbFound) {
      sceneObjBuilder.getSprites(function(_link, _linkConfig) {
        if (sceneConfigName == _linkConfig.name && _linkConfig.name.indexOf("Link") >= 0) {
          sceneObjBuilder.getSprites(function(_node, _nodeConfig) {
            var isStartLink = false;
            if (_linkConfig.startNode == _nodeConfig.name) {
              isStartLink = true;
              cbFound(_node, _nodeConfig, _link, _linkConfig, isStartLink);
            }
            if (_linkConfig.endNode == _nodeConfig.name) {
              cbFound(_node, _nodeConfig, _link, _linkConfig, isStartLink);
            }
          });
        }
      });
    };

    function isNodeOverlapNodes(cbOverlap) {
      sceneObjBuilder.getSprites(function(obj2, sceneConfig2) {
        if (sceneConfig2.name.startsWith("Node") || sceneConfig2.name.endsWith("NodeTemplate")) {
          sceneObjBuilder.getSprites(function(obj3, sceneConfig3) {
            if (sceneConfig3.name.startsWith("Node") || sceneConfig3.name.endsWith("NodeTemplate")) {
              if (sceneConfig2.name != sceneConfig3.name) {
                if (obj2.overlap(obj3)) {
                  cbOverlap();
                }
              }
            }
          });
        }
      });
    };

    function isLinkOverlapNode(sceneConfigName, cbOverlap, cbNotOverlap) {
      var isOverlap = false;
      sceneObjBuilder.getSprites(function(obj2, sceneConfig2) {
        if (sceneConfig2.name.startsWith("Link") && sceneConfig2.name == sceneConfigName) {
          sceneObjBuilder.getSprites(function(obj3, sceneConfig3) {
            if (sceneConfig3.name.startsWith("Node")) {
              if (obj2.overlap(obj3)) {
                isOverlap = true;
                cbOverlap(obj3, sceneConfig3, obj2, sceneConfig2);
              }
            }
          });
        }
      });
      if (!isOverlap && cbNotOverlap) {
        cbNotOverlap();
      }
    };

    function isMouseOverlap(mousePointer, cbIsOver, cbNotOver) {
      var isOverlap = false;
      sceneObjBuilder.getSprites(function(obj, sceneConfig) {
        if (!isOverlap) {
          if (sceneConfig.shape == "circle") {
            var area = new Phaser.Circle(obj.x, obj.y, sceneConfig.radius * 2);
            if (area.contains(mousePointer.x, mousePointer.y)) {
              cbIsOver(obj, sceneConfig);
              isOverlap = true;
            }
          }
          if (sceneConfig.shape == "rectangle") {
            if (obj.getBounds().contains(mousePointer.x, mousePointer.y)) {
              cbIsOver(obj, sceneConfig);
              isOverlap = true;
            }
          }
        }
      });
      if (!isOverlap && cbNotOver) {
        cbNotOver();
      }
    };

    function setConfigPositions(x, y, angle, link, linkConfig) {
      link.x = x;
      link.y = y;
      link.rotation = angle;
      linkConfig.xPosition = x;
      linkConfig.yPosition = y;
      linkConfig.rotation = angle;
    };

    function draw(startX, startY, endX, endY, linkConfig) {
      shapeBuilder.clearShapes(linkConfig);
      shapeBuilder.createShape({
        name: linkConfig.name,
        color: "black",
        shape: "line",
        xScale: 1,
        yScale: 1,
        start: {
          xPosition: startX,
          yPosition: startY
        },
        end: {
          xPosition: endX,
          yPosition: endY
        }
      });
    };

    function getSquareNodePositions(node) {

      var top = {
        x: 0,
        y: 0
      };
      var left = {
        x: 0,
        y: 0
      };
      var right = {
        x: 0,
        y: 0
      };
      var bottom = {
        x: 0,
        y: 0
      };

      var width = node.width;
      if (!width) {
        width = 10;
      }
      var height = node.height;
      if (!height) {
        height = 10;
      }

      right.x = node.x + (width / 2);
      right.y = node.y;

      left.x = node.x - (width / 2);
      left.y = node.y;

      top.x = node.x;
      top.y = node.y - (height / 2);

      bottom.x = node.x;
      bottom.y = node.y + (height / 2);

      return {
        top: top,
        left: left,
        right: right,
        bottom: bottom
      }
    };

    function calculateShortesDistanceToNode(startNode, endNode) {
      var endNodePositions = getSquareNodePositions(endNode);
      var left = endNodePositions.left;
      var right = endNodePositions.right;
      var top = endNodePositions.top;
      var bottom = endNodePositions.bottom;
      var endX = 0;
      var endY = 0;

      //choose the shortest distance
      var distance_left = phaserGame.physics.arcade.distanceToXY(startNode, left.x, left.y);
      var distance_right = phaserGame.physics.arcade.distanceToXY(startNode, right.x, right.y);
      var distance_top = phaserGame.physics.arcade.distanceToXY(startNode, top.x, top.y);
      var distance_bottom = phaserGame.physics.arcade.distanceToXY(startNode, bottom.x, bottom.y);

      if (distance_left > distance_right) {
        endX = right.x;
        endY = right.y;
        if (distance_right > distance_top || distance_right > distance_bottom) {
          if (distance_top > distance_bottom) {
            endX = bottom.x;
            endY = bottom.y;
          } else {
            endX = top.x;
            endY = top.y;
          }
        }
      } else {
        endX = left.x;
        endY = left.y;
        if (distance_left > distance_top || distance_left > distance_bottom) {
          if (distance_top > distance_bottom) {
            endX = bottom.x;
            endY = bottom.y;
          } else {
            endX = top.x;
            endY = top.y;
          }
        }
      }

      return {
        x: endX,
        y: endY
      };
    };

    function startLinkDraw(startNode, startNodeConfig, endNode, endNodeConfig, link, linkConfig, isMouseOver, mouse) {
      //four attach points on rectangle
      var startX;
      var startY;
      var endX;
      var endY;
      if (endNode) {
        if (startNodeConfig.shape == "circle") {
          angle = phaserGame.physics.arcade.angleBetween(startNode, endNode);
          startX = startNode.x + startNodeConfig.radius * Math.cos(angle);
          startY = startNode.y + startNodeConfig.radius * Math.sin(angle);
        }
        if (startNodeConfig.shape == "rectangle") {
          angle = phaserGame.physics.arcade.angleBetween(startNode, endNode);
          var startPos = calculateShortesDistanceToNode(endNode, startNode);
          startX = startPos.x;
          startY = startPos.y;
        }
        if (endNodeConfig.shape == "circle") {
          var endAngle = phaserGame.physics.arcade.angleBetween(endNode, startNode);
          endX = endNode.x + endNodeConfig.radius * Math.cos(endAngle);
          endY = endNode.y + endNodeConfig.radius * Math.sin(endAngle);
          setConfigPositions(endX, endY, angle, link, linkConfig);
          draw(startX, startY, endX, endY, linkConfig);
        }
        if (endNodeConfig.shape == "rectangle") {
          var endPos = calculateShortesDistanceToNode(startNode, endNode);
          endX = endPos.x;
          endY = endPos.y;
          setConfigPositions(endX, endY, angle, link, linkConfig);
          draw(startX, startY, endX, endY, linkConfig);
        }
      } else if (!isMouseOver) {
        if (startNodeConfig.shape == "circle") {
          angle = phaserGame.physics.arcade.angleToPointer(startNode);
          startX = startNode.x + startNodeConfig.radius * Math.cos(angle);
          startY = startNode.y + startNodeConfig.radius * Math.sin(angle);
          endX = mouse.x;
          endY = mouse.y;
          setConfigPositions(endX, endY, angle, link, linkConfig);
          draw(startX, startY, endX, endY, linkConfig);
        }
        if (startNodeConfig.shape == "rectangle") {

          angle = phaserGame.physics.arcade.angleToPointer(startNode);

          var startPos = calculateShortesDistanceToNode(mouse, startNode);
          startX = startPos.x;
          startY = startPos.y;

          endX = mouse.x;
          endY = mouse.y;

          setConfigPositions(endX, endY, angle, link, linkConfig);
          draw(startX, startY, endX, endY, linkConfig);
        }
      }
    };

    function drawLink(linkName, mouse) {

      var startX = 0;
      var startY = 0;
      var angle = 0;
      var endX = 0;
      var endY = 0;
      var link;
      var linkConfig;
      var atLeastOneConnection = false;
      var startNodeConfig
      var startNodeRadius;
      var startNode;
      var endNode;
      var endNodeConfig;
      var endNodeRadius;
      var adjustLinkPos;

      getLinkNodes(linkName, function(_node, _nodeConfig, _link, _linkConfig, isStartLink) {
        link = _link;
        linkConfig = _linkConfig;
        atLeastOneConnection = true;
        if (isStartLink) {
          startNodeRadius = _nodeConfig.radius;
          startNodeConfig = _nodeConfig;
          startNode = _node;

        } else {
          endNodeRadius = _nodeConfig.radius;
          endNodeConfig = _nodeConfig;
          endNode = _node;
        }
      });
      if (atLeastOneConnection) {
        isMouseOverlap(mouse, function(_endNode, _endNodeConfig) { // snap in
          if (linkConfig.endNode == _endNodeConfig.name) {
            endNodeRadius = _endNodeConfig.radius;
            endNodeConfig = _endNodeConfig;
            endNode = _endNode;
          }
          startLinkDraw(startNode, startNodeConfig, endNode, endNodeConfig, link, linkConfig, true, mouse);
        }, function() {
          startLinkDraw(startNode, startNodeConfig, endNode, endNodeConfig, link, linkConfig, false, mouse);
        });
      }
    };
  }, function error(err) {})
});factory(function(factory){ factory.register(false, false, function workflowConfig(){
 return '{"links":[{"type":"Link","nodeA":"bbd753f6-974a-4851-ab71-474749095975","nodeB":"526a0b38-8e72-42b0-377f-9524912c06ad","text":"","lineAngleAdjust":0,"parallelPart":0.5,"perpendicularPart":0,"Id":"6b97ce36-a57f-4ad1-a696-cf4ea49509cf"},{"type":"Link","nodeA":"49d0482f-3cd8-4e03-1e36-3658e3b56339","nodeB":"526a0b38-8e72-42b0-377f-9524912c06ad","text":"","lineAngleAdjust":0,"parallelPart":0.5,"perpendicularPart":0,"Id":"a64dc79b-f209-43dd-3507-928a92809dd1"},{"type":"Link","nodeA":"a2d861e9-2cac-4015-b8aa-3cba1e18d105","nodeB":"526a0b38-8e72-42b0-377f-9524912c06ad","text":"","lineAngleAdjust":0,"parallelPart":0.5,"perpendicularPart":0,"Id":"3a1805a1-d9a6-40c7-f86b-ee7fd3b4b8c0"},{"type":"Link","nodeA":"4bae7b23-3556-4174-67ba-e251528beb42","nodeB":"526a0b38-8e72-42b0-377f-9524912c06ad","text":"","lineAngleAdjust":0,"parallelPart":0.5,"perpendicularPart":0,"Id":"47ff9330-f568-4d42-7eea-4208722d670d"},{"type":"Link","nodeA":"f9300dbc-c145-4699-8571-70dd7984d094","nodeB":"526a0b38-8e72-42b0-377f-9524912c06ad","text":"","lineAngleAdjust":0,"parallelPart":0.5,"perpendicularPart":0,"Id":"51aaeda3-3bee-4411-d6d5-2747d5395545"},{"type":"Link","nodeA":"5b1a32f2-c16f-4c89-5da0-50312470274f","nodeB":"526a0b38-8e72-42b0-377f-9524912c06ad","text":"","lineAngleAdjust":0,"parallelPart":0.5,"perpendicularPart":0,"Id":"4e2087db-eb0d-49a4-a7e5-815656ff8100"},{"type":"Link","nodeA":"9bf46a56-7961-4953-940e-910ced09788b","nodeB":"526a0b38-8e72-42b0-377f-9524912c06ad","text":"","lineAngleAdjust":0,"parallelPart":0.5,"perpendicularPart":0,"Id":"4e43060e-e157-4127-a2c7-d5d1202b1148"},{"type":"Link","nodeA":"9080b619-827f-4ebc-ad1b-31b65b816cf5","nodeB":"526a0b38-8e72-42b0-377f-9524912c06ad","text":"","lineAngleAdjust":0,"parallelPart":0.5,"perpendicularPart":0,"Id":"595e10a7-3da0-4487-7958-25d8b604fec5"},{"type":"Link","nodeA":"89692787-542e-45cd-eeff-756545c09c05","nodeB":"526a0b38-8e72-42b0-377f-9524912c06ad","text":"","lineAngleAdjust":0,"parallelPart":0.5,"perpendicularPart":0,"Id":"97aa53b7-1b19-4887-bc06-ec23b2f99e65"},{"type":"Link","nodeA":"755f4473-0341-4345-f1bf-72222ada38de","nodeB":"526a0b38-8e72-42b0-377f-9524912c06ad","text":"","lineAngleAdjust":0,"parallelPart":0.5,"perpendicularPart":0,"Id":"eb93ff34-61e4-43bc-8916-ebcda877e9b6"},{"type":"Link","nodeA":"526a0b38-8e72-42b0-377f-9524912c06ad","nodeB":"bbd753f6-974a-4851-ab71-474749095975","text":"","lineAngleAdjust":0,"parallelPart":0.5,"perpendicularPart":0,"Id":"484d0df8-8b86-42c9-e166-1cf307e748e8"},{"type":"Link","nodeA":"526a0b38-8e72-42b0-377f-9524912c06ad","nodeB":"49d0482f-3cd8-4e03-1e36-3658e3b56339","text":"","lineAngleAdjust":0,"parallelPart":0.5,"perpendicularPart":0,"Id":"7f31cb02-60ac-475c-f0f5-151e3b532143"},{"type":"Link","nodeA":"526a0b38-8e72-42b0-377f-9524912c06ad","nodeB":"a2d861e9-2cac-4015-b8aa-3cba1e18d105","text":"","lineAngleAdjust":0,"parallelPart":0.5,"perpendicularPart":0,"Id":"aca2087b-b84c-4d37-bf5a-d77168e4ef71"},{"type":"Link","nodeA":"526a0b38-8e72-42b0-377f-9524912c06ad","nodeB":"4bae7b23-3556-4174-67ba-e251528beb42","text":"","lineAngleAdjust":0,"parallelPart":0.5,"perpendicularPart":0,"Id":"b73255d2-c13c-4de6-3104-f34f95a5714a"},{"type":"Link","nodeA":"526a0b38-8e72-42b0-377f-9524912c06ad","nodeB":"f9300dbc-c145-4699-8571-70dd7984d094","text":"","lineAngleAdjust":0,"parallelPart":0.5,"perpendicularPart":0,"Id":"cd71f992-191c-49c5-acc3-98c5b9aece7a"},{"type":"Link","nodeA":"526a0b38-8e72-42b0-377f-9524912c06ad","nodeB":"5b1a32f2-c16f-4c89-5da0-50312470274f","text":"","lineAngleAdjust":0,"parallelPart":0.5,"perpendicularPart":0,"Id":"ab494469-609a-401e-a325-00ce4d359201"},{"type":"Link","nodeA":"526a0b38-8e72-42b0-377f-9524912c06ad","nodeB":"9bf46a56-7961-4953-940e-910ced09788b","text":"","lineAngleAdjust":0,"parallelPart":0.5,"perpendicularPart":0,"Id":"a480a7ce-f7e9-4e7d-8574-fc06d5ffc61d"},{"type":"Link","nodeA":"526a0b38-8e72-42b0-377f-9524912c06ad","nodeB":"9080b619-827f-4ebc-ad1b-31b65b816cf5","text":"","lineAngleAdjust":0,"parallelPart":0.5,"perpendicularPart":0,"Id":"a25a3682-22b3-4dc7-2606-7e3f460b9000"},{"type":"Link","nodeA":"526a0b38-8e72-42b0-377f-9524912c06ad","nodeB":"89692787-542e-45cd-eeff-756545c09c05","text":"","lineAngleAdjust":0,"parallelPart":0.5,"perpendicularPart":0,"Id":"35b6e728-c580-43be-4eb7-7d3cbbb9b65d"},{"type":"Link","nodeA":"526a0b38-8e72-42b0-377f-9524912c06ad","nodeB":"755f4473-0341-4345-f1bf-72222ada38de","text":"","lineAngleAdjust":0,"parallelPart":0.5,"perpendicularPart":0,"Id":"10844f43-d82d-4008-f5c7-1f066a4a9289"},{"type":"Link","nodeA":"dd676895-49be-4865-c757-7fc4839871a3","nodeB":"526a0b38-8e72-42b0-377f-9524912c06ad","text":"load","lineAngleAdjust":0,"parallelPart":0.5,"perpendicularPart":0,"Id":"d1a06bd5-9a18-447e-3a15-4864b53d2130"},{"type":"Link","nodeA":"8e78a92b-ce35-4c0e-6397-2a24fa428ca5","nodeB":"dd676895-49be-4865-c757-7fc4839871a3","text":"load","lineAngleAdjust":0,"parallelPart":0.5,"perpendicularPart":0,"Id":"59f60b35-75b4-430e-a956-e37acc3df72c"}],"nodes":[{"x":839,"y":31,"mouseOffsetX":0,"mouseOffsetY":0,"isAcceptState":true,"text":"lvl1","Id":"755f4473-0341-4345-f1bf-72222ada38de"},{"x":386,"y":363,"mouseOffsetX":0,"mouseOffsetY":0,"isAcceptState":false,"text":"lvl10","Id":"bbd753f6-974a-4851-ab71-474749095975"},{"x":432,"y":611,"mouseOffsetX":0,"mouseOffsetY":0,"isAcceptState":false,"text":"lvl9","Id":"49d0482f-3cd8-4e03-1e36-3658e3b56339"},{"x":639,"y":755,"mouseOffsetX":0,"mouseOffsetY":0,"isAcceptState":false,"text":"lvl8","Id":"a2d861e9-2cac-4015-b8aa-3cba1e18d105"},{"x":921,"y":804,"mouseOffsetX":0,"mouseOffsetY":0,"isAcceptState":false,"text":"lvl7","Id":"4bae7b23-3556-4174-67ba-e251528beb42"},{"x":1181,"y":744,"mouseOffsetX":0,"mouseOffsetY":0,"isAcceptState":false,"text":"lvl6","Id":"f9300dbc-c145-4699-8571-70dd7984d094"},{"x":1270,"y":595,"mouseOffsetX":-5,"mouseOffsetY":13,"isAcceptState":false,"text":"lvl5","Id":"5b1a32f2-c16f-4c89-5da0-50312470274f"},{"x":1377,"y":457,"mouseOffsetX":5,"mouseOffsetY":-7,"isAcceptState":false,"text":"lvl4","Id":"9bf46a56-7961-4953-940e-910ced09788b"},{"x":1341,"y":269,"mouseOffsetX":9,"mouseOffsetY":1,"isAcceptState":false,"text":"lvl3","Id":"9080b619-827f-4ebc-ad1b-31b65b816cf5"},{"x":1168,"y":114,"mouseOffsetX":0,"mouseOffsetY":0,"isAcceptState":true,"text":"lvl2","Id":"89692787-542e-45cd-eeff-756545c09c05"},{"x":871,"y":378,"mouseOffsetX":0,"mouseOffsetY":0,"isAcceptState":false,"text":"score","Id":"526a0b38-8e72-42b0-377f-9524912c06ad"},{"x":55,"y":49,"mouseOffsetX":0,"mouseOffsetY":0,"isAcceptState":false,"text":"loader","Id":"8e78a92b-ce35-4c0e-6397-2a24fa428ca5"},{"x":459,"y":81,"mouseOffsetX":0,"mouseOffsetY":0,"isAcceptState":false,"text":"capPla","Id":"dd676895-49be-4865-c757-7fc4839871a3"}]}'; 
 }, function error(err){})});factory(function(factory){ factory.register(false, false, function textBuilderConfig(){
 return '[{"align":"center","fill":"#9343ff","font":"16px Arial","name":"playerCaptureText","text":"enter text here..."},{"align":"center","fill":"#9343ff","font":"12px Arial","name":"timerText","text":"00:00:00"},{"align":"center","fill":"#9343ff","font":"12px Arial","name":"playerScoreText1","text":""},{"align":"center","fill":"#9343ff","font":"12px Arial","name":"playerScoreText2","text":""},{"align":"center","fill":"#9343ff","font":"12px Arial","name":"playerScoreText3","text":""},{"align":"center","fill":"#9343ff","font":"12px Arial","name":"playerScoreText4","text":""},{"align":"center","fill":"#9343ff","font":"12px Arial","name":"playerScoreText5","text":""}]'; 
 }, function error(err){})});factory(function(factory){ factory.register(false, false, function spriteBuilderConfig(){
 return '[{"file":"../publish/assets/capturePlayer.png","name":"playerCapture"},{"file":"../publish/assets/play_btn.png","name":"playButton"},{"file":"../publish/assets/close_btn.png","name":"closeButton"},{"file":"../publish/assets/submit_btn.png","name":"submitButton"},{"file":"../publish/assets/preloader.png","name":"preloader"},{"file":"../publish/assets/fly.png","name":"fly"},{"file":"../publish/assets/startEndStateNodeTemplate.png","name":"initialStateNodeTemplate"},{"file":"../publish/assets/startEndStateNodeTemplate.png","name":"finalStateNodeTemplate"},{"file":"../publish/assets/stateNodeTemplate.png","name":"stateNodeTemplate"},{"file":"../publish/assets/stateNodeLinkTemplate.png","name":"stateNodeLinkTemplate"},{"file":"../publish/assets/preview.png","name":"preview"},{"file":"../publish/assets/publish.png","name":"publish"},{"file":"../publish/assets/stateNodeLinkArrowTemplate.png","name":"stateNodeLinkArrowTemplate"},{"file":"../publish/assets/contextLoader.png","name":"contextLoader"}]'; 
 }, function error(err){})});factory(function(factory){ factory.register(false, false, function shapeBuilderConfig(){
 return '[{"name":"stateNode1"},{"name":"stateNode2"}]'; 
 }, function error(err){})});factory(function(factory){ factory.register(false, false, function scoreboardSceneConfig(){
 return '[{"anchor":true,"enabled":true,"hasAnimations":false,"height":60,"isStatic":false,"name":"cursor","priority":0,"width":60,"xPosition":0,"xScale":1,"yPosition":0,"yScale":1,"type":"image"},{"anchor":false,"enabled":true,"hasAnimations":false,"height":50,"isStatic":true,"name":"scoreboardHeading","priority":1,"width":170,"xPosition":300,"xScale":1,"yPosition":100,"yScale":1,"type":"image"},{"anchor":false,"enabled":true,"hasAnimations":false,"height":50,"isStatic":true,"name":"playerScore","priority":2,"width":400,"xPosition":400,"xScale":1,"yPosition":180,"yScale":1,"type":"sprite | image","cloneY":5},{"anchor":false,"enabled":true,"hasAnimations":false,"height":50,"isStatic":true,"name":"playerScoreText","priority":1,"width":350,"xPosition":200,"xScale":0.8,"yPosition":170,"yScale":0.8,"type":"text","cloneY":5},{"anchor":false,"enabled":true,"hasAnimations":true,"height":50,"isStatic":true,"name":"closeButton","priority":1,"width":150,"xPosition":450,"xScale":1,"yPosition":500,"yScale":1,"type":"sprite | animation"},{"anchor":false,"enabled":true,"hasAnimations":true,"height":50,"isStatic":true,"name":"playButton","priority":1,"width":150,"xPosition":200,"xScale":1,"yPosition":500,"yScale":1,"type":"sprite | animation"},{"anchor":false,"enabled":true,"hasAnimations":false,"height":600,"isStatic":true,"name":"scoreboardBackground","priority":3,"width":800,"xPosition":0,"xScale":1,"yPosition":0,"yScale":1,"type":"image"}]'; 
 }, function error(err){})});factory(function(factory){ factory.register(false, false, function sceneSelectorConfig(){
 return '[{"Id":"e808e9a5-34fa-450d-8416-8f7a664276ce","name":"designerScene","priority":0,"repeat":false},{"Id":"dd676895-49be-4865-c757-7fc4839871a3","name":"capturePlayerScene","priority":2,"repeat":false},{"Id":"8e78a92b-ce35-4c0e-6397-2a24fa428ca5","name":"preloaderScene","priority":1,"repeat":false},{"Id":"526a0b38-8e72-42b0-377f-9524912c06ad","name":"scoreboardScene","priority":3,"repeat":true},{"Id":"4bae7b23-3556-4174-67ba-e251528beb42","name":"flyScene","priority":4,"repeat":true}]'; 
 }, function error(err){})});factory(function(factory){ factory.register(false, false, function preloaderSceneConfig(){
 return '[{"anchor":false,"enabled":true,"hasAnimations":true,"height":600,"name":"preloader","priority":2,"width":800,"xPosition":0,"xScale":1,"yPosition":0,"yScale":1,"type":"sprite | animation"},{"anchor":true,"enabled":true,"hasAnimations":false,"height":40,"name":"cursor","priority":1,"width":40,"xPosition":0,"xScale":1,"yPosition":0,"yScale":1,"type":"image"}]'; 
 }, function error(err){})});factory(function(factory){ factory.register(false, false, function phaserGameConfig(){
 return '{"width":1024,"height":768,"title":"letfly"}'; 
 }, function error(err){})});factory(function(factory){ factory.register(false, false, function imageBuilderConfig(){
 return '[{"file":"../publish/assets/cursor.png","name":"cursor"},{"file":"../publish/assets/playerScore.png","name":"playerScore"},{"file":"../publish/assets/scoreboard_heading.png","name":"scoreboardHeading"},{"file":"../publish/assets/scoreboard.png","name":"scoreboardBackground"},{"file":"../publish/assets/background.jpg","name":"flyBackground"},{"file":"../publish/assets/playerCapture.png","name":"playerCapture"},{"file":"../publish/assets/diagramMenu.png","name":"diagramMenu"},{"file":"../publish/assets/contextLoader.png","name":"contextLoader"}]'; 
 }, function error(err){})});factory(function(factory){ factory.register(false, false, function flySceneConfig(){
 return '[{"anchor":true,"enabled":true,"hasAnimations":false,"height":60,"isStatic":true,"name":"cursor","priority":1,"width":60,"xPosition":0,"xScale":1,"yPosition":0,"yScale":1,"type":"image"},{"anchor":false,"enabled":true,"hasAnimations":false,"height":250,"isStatic":true,"name":"timerText","priority":2,"width":500,"xPosition":20,"xScale":3,"yPosition":20,"yScale":3,"type":"text"},{"anchor":true,"enabled":true,"hasAnimations":true,"height":80,"isStatic":true,"name":"fly","priority":2,"width":120,"xPosition":60,"xScale":1,"yPosition":60,"yScale":1,"type":"sprite | animation","start":true,"cloneXY":5},{"anchor":false,"enabled":true,"hasAnimations":false,"height":600,"isStatic":true,"name":"flyBackground","priority":3,"width":800,"xPosition":0,"xScale":3,"yPosition":0,"yScale":3,"type":"image"}]'; 
 }, function error(err){})});factory(function(factory){ factory.register(false, false, function designerSceneConfig(){
 return '[{"name":"initialStateNodeTemplate","xPosition":115,"yPosition":110,"xAnchorPosition":0.5,"yAnchorPosition":0.5,"xScale":1,"yScale":1,"radius":50,"enabled":true,"priority":1,"dragDrop":true,"animationStartName":"swithUnselectedInitialState","type":"sprite | animation","shape":"circle"},{"name":"stateNodeTemplate","xPosition":110,"yPosition":260,"xAnchorPosition":0.5,"yAnchorPosition":0.5,"xScale":1,"yScale":1,"enabled":true,"priority":1,"dragDrop":true,"animationStartName":"switchUnselectedState","type":"sprite | animation","shape":"rectangle"},{"name":"stateNodeLinkTemplate","xPosition":40,"yPosition":400,"xAnchorPosition":0,"yAnchorPosition":0.5,"startNode":"","endNode":"","xScale":0.4,"yScale":1,"enabled":true,"priority":2,"dragDrop":true,"animationStartName":"switchUnselectedStateNodeLink","type":"sprite | animation","shape":"line","width":"150","height":"15"},{"name":"finalStateNodeTemplate","xPosition":115,"yPosition":550,"xAnchorPosition":0.5,"yAnchorPosition":0.5,"xScale":1,"yScale":1,"radius":50,"enabled":true,"priority":1,"dragDrop":true,"animationStartName":"switchUnselectedFinalState","type":"sprite | animation","shape":"circle"},{"enabled":true,"height":"600","xAnchorPosition":-1,"yAnchorPosition":-1,"isStatic":true,"name":"diagramMenu","priority":3,"width":"200","xPosition":10,"yPosition":10,"xScale":1,"yScale":1,"type":"image","shape":"circle"},{"name":"contextLoader","xPosition":500,"yPosition":500,"xAnchorPosition":0.5,"yAnchorPosition":0.5,"xScale":1,"yScale":1,"radius":50,"enabled":true,"priority":1,"dragDrop":false,"type":"sprite | animation","shape":"circle"},{"name":"publish","xPosition":400,"yPosition":40,"xAnchorPosition":-1,"yAnchorPosition":-1,"xScale":1,"yScale":1,"enabled":true,"priority":3,"type":"sprite | animation","shape":"rectangle","width":"181","height":"44"},{"name":"preview","xPosition":600,"yPosition":40,"xAnchorPosition":-1,"yAnchorPosition":-1,"xScale":1,"yScale":1,"enabled":true,"priority":3,"type":"sprite | animation","shape":"rectangle","width":"181","height":"44"},{"name":"stateNodeLinkArrowTemplate","xPosition":0,"yPosition":0,"xAnchorPosition":1,"yAnchorPosition":0.5,"startNode":"","endNode":"","xScale":1,"yScale":1,"enabled":true,"priority":2,"dragDrop":false,"animationStartName":"switchUnselectedStateNodeLinkArrow","type":"sprite | animation","shape":"arrow","width":"14.5","height":"15","visible":false}]'; 
 }, function error(err){})});factory(function(factory){ factory.register(false, false, function capturePlayerSceneConfig(){
 return '[{"anchor":true,"enabled":true,"hasAnimations":false,"height":60,"isStatic":false,"name":"cursor","priority":1,"width":60,"xPosition":0,"xScale":1,"yPosition":0,"yScale":1,"type":"image"},{"anchor":true,"enabled":true,"hasAnimations":false,"height":0,"isStatic":true,"name":"playerCaptureText","priority":2,"width":0,"xPosition":440,"xScale":1.2,"yPosition":245,"yScale":1.2,"type":"text","text":"enter your name here..."},{"anchor":false,"enabled":true,"hasAnimations":false,"height":40,"isStatic":true,"name":"playerCapture","priority":3,"width":500,"xPosition":400,"xScale":1,"yPosition":240,"yScale":1,"type":"sprite | image"},{"anchor":false,"enabled":true,"hasAnimations":true,"height":50,"isStatic":true,"name":"submitButton","priority":4,"width":150,"xPosition":400,"xScale":1,"yPosition":500,"yScale":1,"type":"sprite | animation"},{"anchor":false,"enabled":true,"hasAnimations":false,"height":600,"isStatic":true,"name":"scoreboardBackground","priority":5,"width":800,"xPosition":0,"xScale":1,"yPosition":0,"yScale":1,"type":"image"}]'; 
 }, function error(err){})});factory(function(factory){ factory.register(false, false, function animationBuilderConfig(){
 return '[{"animations":[{"startIndex":0,"endIndex":1,"name":"playButtonAnim","speed":10}],"frameHeight":46,"frameWidth":150,"name":"playButton"},{"animations":[{"startIndex":1,"endIndex":0,"name":"closeButtonAnim","speed":10}],"frameHeight":46,"frameWidth":150,"name":"closeButton"},{"animations":[{"startIndex":1,"endIndex":0,"name":"submitButtonAnim","speed":0}],"frameHeight":46,"frameWidth":150,"name":"submitButton"},{"animations":[{"startIndex":0,"endIndex":168,"name":"play","speed":0}],"frameHeight":600,"frameWidth":800,"name":"preloader"},{"animations":[{"startIndex":0,"endIndex":15,"name":"flyAlive","repeat":true,"speed":10},{"startIndex":16,"endIndex":21,"name":"flyDead","speed":10}],"frameHeight":128,"frameWidth":128,"name":"fly"},{"animations":[{"startIndex":1,"endIndex":0,"name":"switchUnselectedState","speed":100},{"startIndex":0,"endIndex":1,"name":"switchSelectedState","speed":100}],"frameHeight":98,"frameWidth":152.2,"name":"stateNodeTemplate"},{"animations":[{"startIndex":2,"endIndex":0,"name":"switchUnselectedInitalState","speed":100},{"startIndex":0,"endIndex":2,"name":"switchSelectedInitalState","speed":100}],"frameHeight":99,"frameWidth":100,"name":"initialStateNodeTemplate"},{"animations":[{"startIndex":0,"endIndex":1,"name":"switchUnselectedFinalState","speed":100},{"startIndex":1,"endIndex":3,"name":"switchSelectedFinalState","speed":100}],"frameHeight":99,"frameWidth":100,"name":"finalStateNodeTemplate"},{"animations":[{"startIndex":1,"endIndex":0,"name":"switchUnselectedStateNodeLink","speed":100},{"startIndex":0,"endIndex":1,"name":"switchSelectedStateNodeLink","speed":100}],"frameHeight":15,"frameWidth":332,"name":"stateNodeLinkTemplate"},{"animations":[{"startIndex":1,"endIndex":0,"name":"buttonSelectedPreview","speed":10}],"frameHeight":44,"frameWidth":181,"name":"preview"},{"animations":[{"startIndex":1,"endIndex":0,"name":"buttonSelectedPublish","speed":10}],"frameHeight":44,"frameWidth":181,"name":"publish"},{"animations":[{"startIndex":1,"endIndex":0,"name":"switchUnselectedStateNodeLinkArrow","speed":100},{"startIndex":0,"endIndex":1,"name":"switchSelectedStateNodeLinkArrow","speed":100}],"frameHeight":15,"frameWidth":15,"name":"stateNodeLinkArrowTemplate"},{"animations":[{"startIndex":0,"endIndex":3,"name":"load","speed":10}],"frameHeight":50,"frameWidth":50,"name":"contextLoader"}]'; 
 }, function error(err){})});